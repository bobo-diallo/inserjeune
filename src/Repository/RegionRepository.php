<?php

namespace App\Repository;

use App\Entity\Region;
use App\Entity\User;
use App\Model\Template\TemplateEntity;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;

/**
 * RegionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegionRepository extends ServiceEntityRepository implements ChildColumTemplateRepository, ParentColumTemplateRepository
{
	private TokenStorageInterface $tokenStorage;

	public function __construct(ManagerRegistry $registry, TokenStorageInterface $tokenStorage) {
		parent::__construct($registry, Region::class);
		$this->tokenStorage = $tokenStorage;
	}

    function getNameAndIndicatif(int $id): array {
        return $this->createQueryBuilder('r')
            ->select('r.id, r.phoneCode, r.phoneDigit')
            ->where('r.id != :id')
            ->setParameters([
                'id' => $id,
            ])
            ->getQuery()
            ->getResult();
    }

	/**
	 * @param int $countryId
	 * @return string[]
	 */
    function getNamesByCountry(int $countryId): array {
        return $this->createQueryBuilder('r')
            ->select('r.name')
            ->where('r.country = :countryId')
	        ->setParameter('countryId', $countryId)
            ->getQuery()
            ->getSingleColumnResult();
    }

	/**
	 * @param int $id
	 * @return string[]
	 */
	public function getNameByParentId(int $id): array {
		return $this->getNamesByCountry($id);
	}

	/**
	 * @return TemplateEntity[]
	 */
	public function getTemplateData(): array {
		/** @var User $currentUser */
		$currentUser = $this->tokenStorage->getToken()->getUser();
		$countryId = $currentUser->getCountry()->getId();

		return array_map(function (array $item): TemplateEntity {
			return new TemplateEntity((int) $item['id'], $item['name']);
		},
			$this->createQueryBuilder('r')
				->select('r.id, r.name')
				->where('r.country = :countryId')
				->setParameter('countryId', $countryId)
				->getQuery()
				->getResult()
		);
	}
}
