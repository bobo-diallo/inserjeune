<?php

namespace App\Repository;

use App\Entity\School;
use App\Entity\SectorArea;
use App\Entity\User;
use App\Model\Template\TemplateEntity;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * SectorAreaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SectorAreaRepository extends ServiceEntityRepository implements ParentColumTemplateRepository
{
	private TokenStorageInterface $tokenStorage;
    private TranslatorInterface $translator;

	public function __construct(
        ManagerRegistry $registry,
        TokenStorageInterface $tokenStorage,
        TranslatorInterface $translator
    ) {
		parent::__construct($registry, SectorArea::class);
		$this->tokenStorage = $tokenStorage;
        $this->translator = $translator;
	}

	/**
	 * @return string[]
	 */
	public function getNames(): array {
		return array_map(
            function (string $name): string {
                return $this->translator->trans($name);
            },
            $this->createQueryBuilder('sector')
                ->select('sector.name')
                ->getQuery()
                ->getSingleColumnResult()
        );
	}

	public function getTemplateData(): array {
		/** @var User $currentUser */
		$currentUser = $this->tokenStorage->getToken()->getUser();
		$school = $currentUser->getSchool();

		if ($school) {
			$qb = $this->createQueryBuilder('sa');

			$qb->select('sa.id, sa.name')
				->innerJoin('App\Entity\School', 's', Join::WITH, 'sa.id IN (
                s.sectorArea1,
                s.sectorArea2,
                s.sectorArea3,
                s.sectorArea4,
                s.sectorArea5,
                s.sectorArea6
            )')
				->where('s.id = :schoolId')
				->setParameter('schoolId', $school->getId());


            $result = $qb->getQuery()->getResult();
            $result = array_filter($result, function (array $item) {
                return $item['name'] != null && $item['name'] != '';
            });

            return array_map(function (array $item): TemplateEntity {
					return new TemplateEntity((int)$item['id'],$this->translator->trans($item['name']) );
				},
                $result);
		}
		return [];
	}

	/**
	 * @param int $schoolId
	 * @return string[]
	 */
	public function getSectorAreaNamesForSchool(int $schoolId): array {
		return $this->createQueryBuilder('sa')
			->select('sa.name')
			->innerJoin(School::class, 's', Join::WITH, 'sa.id IN (
                s.sectorArea1,
                s.sectorArea2,
                s.sectorArea3,
                s.sectorArea4,
                s.sectorArea5,
                s.sectorArea6
            )')
			->where('s.id = :schoolId')
			->setParameter('schoolId', $schoolId)
			->getQuery()
			->getSingleColumnResult();
	}
}
