<?php

namespace App\Repository;

use App\Entity\School;
use App\Entity\SectorArea;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use App\Entity\City;
use App\Entity\Country;
use App\Entity\Region;
use Doctrine\Persistence\ManagerRegistry;

/**
 * SchoolRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SchoolRepository extends ServiceEntityRepository {
    public function __construct(ManagerRegistry $registry) {
        parent::__construct($registry, School::class);
    }

    /**
     * @param Country $country
     * @return School[]
     */
    public function getNameByCountry(Country $country): array {
        return $this->createQueryBuilder('s')
            ->where('s.country = :country')
            ->setParameter('country', $country)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Region $region
     * @return School[]
     */
    public function getNameByRegion(Region $region): array {
        return $this->createQueryBuilder('s')
            ->where('s.region = :region')
            ->setParameter('region', $region)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param City $city
     * @return School[]
     */
    public function getNameByCity(City $city): array {
        return $this->createQueryBuilder('s')
            ->where('s.city = :city')
            ->setParameter('city', $city)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param City $city
     * @param \DateTime $createdDate
     * @return School[]
     */
    public function getByCityAndCreatedDate(City $city, \DateTime $createdDate): array {
        return $this->createQueryBuilder('s')
            ->where('s.city = :city')
            ->andWhere('s.createdDate = :createdDate')
            ->setParameters(['city' => $city, 'createdDate' => $createdDate])
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Region $region
     * @param \DateTime $beginDate
     * @param \DateTime $endDate
     * @return School[]
     */
    public function getByRegionBetweenCreatedDateAndEndDate(
        Region $region,
        \DateTime $beginDate,
        \DateTime $endDate): array {
        return $this->createQueryBuilder('s')
            ->where('s.region = :region')
            ->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
            ->setParameters([
                'region' => $region,
                'beginDate'=> $beginDate,
                'endDate' => $endDate
            ])
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Country $country
     * @param \DateTime $beginDate
     * @param \DateTime $endDate
     * @return School[]
     */
    public function getByCountryBetweenCreatedDateAndEndDate(
        Country $country,
        ?\DateTime $beginDate,
        ?\DateTime $endDate): array {
        return $this->createQueryBuilder('s')
            ->where('s.country = :country')
            ->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
            ->setParameters([
                'country' => $country,
                'beginDate' => $beginDate,
                'endDate' => $endDate
            ] )
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Region $region
     * @param SectorArea $sectorArea
     * @param \DateTime $beginDate
     * @param \DateTime $endDate
     * @return School[]
     */
    public function getByRegionAndSectorAreaBetweenCreatedDateAndEndDate(
        Region $region,
        SectorArea $sectorArea,
        \DateTime $beginDate,
        \DateTime $endDate): array {
        $expr = $this->getEntityManager()->createQueryBuilder()->expr();
        return $this->createQueryBuilder('s')
            ->where('s.region = :region')
            ->andWhere($expr->orX(
                $expr->eq('s.sectorArea1', ':sectorArea'),
                $expr->eq('s.sectorArea2', ':sectorArea'),
                $expr->eq('s.sectorArea3', ':sectorArea'),
                $expr->eq('s.sectorArea4', ':sectorArea'),
                $expr->eq('s.sectorArea5', ':sectorArea'),
                $expr->eq('s.sectorArea6', ':sectorArea')
            ))
            ->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
            ->setParameters([
                'region' => $region,
                'sectorArea' => $sectorArea,
                'beginDate' => $beginDate,
                'endDate' => $endDate
            ])
            ->getQuery()
            ->getResult();
    }
    /**
     * @param Country $country
     * @param SectorArea $sectorArea
     * @param \DateTime $beginDate
     * @param \DateTime $endDate
     * @return School[]
     */
    public function getByCountryAndSectorAreaBetweenCreatedDateAndEndDate(
        Country $country,
        SectorArea $sectorArea,
        \DateTime $beginDate,
        \DateTime $endDate): array {
        $expr = $this->getEntityManager()->createQueryBuilder()->expr();
        return $this->createQueryBuilder('s')
            ->where('s.country = :country')
            ->andWhere($expr->orX(
                $expr->eq('s.sectorArea1', ':sectorArea'),
                $expr->eq('s.sectorArea2', ':sectorArea'),
                $expr->eq('s.sectorArea3', ':sectorArea'),
                $expr->eq('s.sectorArea4', ':sectorArea'),
                $expr->eq('s.sectorArea5', ':sectorArea'),
                $expr->eq('s.sectorArea6', ':sectorArea')
            ))
            ->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
            ->setParameters([
                'country' => $country,
                'sectorArea'=> $sectorArea,
                'beginDate' => $beginDate,
                'endDate' => $endDate
            ])
            ->getQuery()
            ->getResult();
    }

    function getSchoolsByCoordinates(string $latitude, string $longitude, string $gap): array {
        $expr = $this->getEntityManager()->createQueryBuilder()->expr();

        return $this->createQueryBuilder('s')
            ->select('s.id, s.latitude, s.longitude')
            ->where($expr->andX(
                $expr->between('s.latitude', ':latMin', ':latMax'),
                $expr->between('s.longitude', ':longMin', ':longMax'),
            ))
            ->setParameters([
                'latMin' => floatval($latitude),
                'latMax'=> floatval($latitude) + 10 * floatval($gap),
                'longMin' => floatval($longitude),
                'longMax'=> floatval($longitude) + 10 * floatval($gap),
            ])
            ->getQuery()
            ->getResult();

        // var_dump($query->getSQL(),
        //     floatval($latitude),
        //     floatval($gap),
        //     floatval($latitude) + 10 * floatval($gap),
        //     floatval($longitude),
        //     floatval($longitude) + 10 * floatval($gap)
        // ); die();
        // return $query->getResult();
    }
}
