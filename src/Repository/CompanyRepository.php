<?php

namespace App\Repository;

use App\Entity\Company;
use App\Model\CompanyReceiverNotification;
use App\Model\PersonDegreeReceiverNotification;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use App\Entity\City;
use App\Entity\Country;
use App\Entity\Region;
use App\Entity\LegalStatus;
use App\Entity\School;
use App\Entity\SectorArea;
use Doctrine\Persistence\ManagerRegistry;
use PhpParser\Node\Expr\Array_;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompanyRepository extends ServiceEntityRepository {
	public function __construct(ManagerRegistry $registry) {
		parent::__construct($registry, Company::class);
	}

	/**
	 * @param Country $country
	 * @return Company[]
	 */
	public function getNameByCountry(Country $country): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->setParameter('country', $country)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @return Company[]
	 */
	public function getNameByRegion(Region $region): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->setParameter('region', $region)
			->getQuery()
			->getResult();
	}

	/**
	 * @param City $city
	 * @return Company[]
	 */
	public function getNameByCity(City $city): array {
		return $this->createQueryBuilder('c')
			->where('c.city = :city')
			->setParameter('city', $city)
			->getQuery()
			->getResult();
	}

	/**
	 * @param SectorArea $sectorArea
	 * @return Company[]
	 */
	public function getNameSectorArea(SectorArea $sectorArea): array {
		return $this->createQueryBuilder('c')
			->where('c.sectorArea = :sectorArea')
			->setParameter('sectorArea', $sectorArea)
			->getQuery()
			->getResult();
	}


	/**
	 * @param LegalStatus $legalStatus
	 * @return Company[]
	 */
	public function getNameLegalStatus(LegalStatus $legalStatus): array {
		return $this->createQueryBuilder('c')
			->where('c.legalStatus = :legalStatus')
			->setParameter('legalStatus', $legalStatus)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param SectorArea $sectorArea
	 * @return Company[]
	 */
	public function getByCountryAndSectorArea(Country $country, SectorArea $sectorArea): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere('c.sectorArea = :sectorArea')
			->setParameters(['country' => $country, 'sectorArea' => $sectorArea])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param SectorArea $sectorArea
	 * @return Company[]
	 */
	public function getByRegionAndSectorArea(Region $region, SectorArea $sectorArea): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->andWhere('c.sectorArea = :sectorArea')
			->setParameters(['region' => $region, 'sectorArea' => $sectorArea])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param LegalStatus $legalStatus
	 * @return Company[]
	 */
	public function getByCountryAndLegalStatus(Country $country, LegalStatus $legalStatus): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere('c.legalStatus = :legalStatus')
			->setParameters(['country' => $country, 'legalStatus' => $legalStatus])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param LegalStatus $legalStatus
	 * @return Company[]
	 */
	public function getByRegionAndLegalStatus(Region $region, LegalStatus $legalStatus): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->andWhere('c.legalStatus = :legalStatus')
			->setParameters(['region' => $region, 'legalStatus' => $legalStatus])
			->getQuery()
			->getResult();
	}

	/**
	 * @param School $school
	 * @return array
	 */
	public function getBySchool(School $school) {
		$query = $this->createQueryBuilder('a')
			->select('a')
			->leftJoin('a.schools', 's')
			->addSelect('s');

		return $query->add('where', $query->expr()->in('s', ':s'))
			->setParameter('s', $school)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param \DateTime $createdDate
	 * @return Company[]
	 */
	public function getByCountryAndCreatedDate(Country $country, \DateTime $createdDate): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere('c.createdDate = :createdDate')
			->setParameters(['country' => $country, 'createdDate' => $createdDate])
			->getQuery()
			->getResult();
	}

	public function getByCountryBetweenCreatedDateAndEndDate(
		Country $country,
		?\DateTime $beginDate,
		?\DateTime $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere ('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'country' => $country,
				'beginDate' => $beginDate,
				'endDate' => $endDate
			] )
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param \DateTime $beginDate
	 * @param \DateTime $endDate
	 * @return Company[]
	 */
	public function getByRegionBetweenCreatedDateAndEndDate(
		Region $region,
		\DateTime $beginDate,
		\DateTime $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->andWhere ('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'region' => $region,
				'beginDate'=> $beginDate,
				'endDate' => $endDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param SectorArea $sectorArea
	 * @param \DateTime $beginDate
	 * @param \DateTime $endDate
	 * @return Company[]
	 */
	public function getByCountryAndSectorAreaBetweenCreatedDateAndEndDate(
		Country $country,
		SectorArea $sectorArea,
		\DateTime $beginDate,
		\DateTime $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere('c.sectorArea = :sectorArea')
			->andWhere ('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'country' => $country,
				'sectorArea'=> $sectorArea,
				'beginDate' => $beginDate,
				'endDate' => $endDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param SectorArea $sectorArea
	 * @param \DateTime $beginDate
	 * @param \DateTime $endDate
	 * @return Company[]
	 */
	public function getByRegionAndSectorAreaBetweenCreatedDateAndEndDate(
		Region $region,
		SectorArea $sectorArea,
		\DateTime $beginDate,
		\DateTime $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->andWhere('c.sectorArea = :sectorArea')
			->andWhere('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'region' => $region,
				'sectorArea' => $sectorArea,
				'beginDate' => $beginDate,
				'endDate' => $endDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param LegalStatus $legalStatus
	 * @param \DateTime $beginDate
	 * @param \DateTime $endDate
	 * @return Company[]
	 */
	public function getByCountryAndLegalStatusBetweenCreatedDateAndEndDate(
		Country     $country,
		LegalStatus $legalStatus,
		\DateTime   $beginDate,
		\DateTime   $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.country = :country')
			->andWhere('c.legalStatus = :legalStatus')
			->andWhere('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'country' => $country,
				'legalStatus' => $legalStatus,
				'beginDate' => $beginDate,
				'endDate' => $endDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param LegalStatus $legalStatus
	 * @param \DateTime $beginDate
	 * @param \DateTime $endDate
	 * @return Company[]
	 */
	public function getByRegionAndLegalStatusBetweenCreatedDateAndEndDate(
		Region $region,
		LegalStatus $legalStatus,
		\DateTime $beginDate,
		\DateTime $endDate): array {
		return $this->createQueryBuilder('c')
			->where('c.region = :region')
			->andWhere('c.legalStatus = :legalStatus')
			->andWhere ('c.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'region' => $region,
				'legalStatus'=> $legalStatus,
				'beginDate'=> $beginDate,
				'endDate'=>$endDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @param array $companyIds
	 * @return CompanyReceiverNotification[]
	 */
	public function getCompaniesWithIds(array $companyIds): array {
		return $this->createQueryBuilder('company')
			->select('NEW ' . CompanyReceiverNotification::class . '(
				company.id, 
				company.name, 
				company.email, 
				user.phone, 
				company.temporaryPasswd)')
			->innerJoin('company.user', 'user')
			->where('company.id IN (:ids)')
			->andWhere('company.email IS NOT NULL')
			->setParameter('ids', $companyIds)
			->getQuery()
			->getResult();
	}

    function getCompaniesByCityForCoordinates(City $city): array {
        return $this->createQueryBuilder('c')
            ->select('c.id, c.latitude, c.longitude')
            ->where('c.city = :city')
            ->setParameters([
                'city' => $city,
            ])
            ->getQuery()
            ->getResult();
    }

    function getWithoutCoordinate(): array {
        return $this->createQueryBuilder('c')
            ->select('c.id')
            ->where('c.latitude IS NULL')
            ->orWhere('c.longitude IS NULL')
            ->getQuery()
            ->getResult();
    }

    public function getSameCordinates(): array {
        $statement = $this->_em->getConnection()->prepare("
			SELECT 
			    cm.id, 
			    cm.longitude,
			    cm.latitude,
			    DATE_FORMAT(cm.created_date, '%d/%m/%Y') as created_date,
			    DATE_FORMAT(cm.updated_date, '%d/%m/%Y') as updated_date,
			    ct.name AS city,
			    c.name AS country,
			    'duplicate coo' as error,
			    'company' as actor
	        FROM company cm
	        LEFT JOIN city ct ON cm.id_city = ct.id
	        LEFT JOIN country c ON cm.id_country = c.id
	        WHERE (cm.longitude, cm.latitude) IN (
	            SELECT cm2.longitude, cm2.latitude
	            FROM company cm2
	            GROUP BY cm2.longitude, cm2.latitude
	            HAVING COUNT(*) > 1
	        )
	        ORDER BY cm.longitude
		");
        $result = $statement->executeQuery();
        return $result->fetchAllAssociative();
    }
}
