<?php

namespace App\Repository;

use App\Entity\Degree;
use App\Entity\PersonDegree;
use App\Entity\School;
use App\Model\PersonDegreeReadOnly;
use DateTime;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use App\Entity\Activity;
use App\Entity\City;
use App\Entity\Country;
use App\Entity\Region;
use App\Entity\SectorArea;
use Doctrine\Persistence\ManagerRegistry;

/**
 * PersonDegreeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonDegreeRepository extends ServiceEntityRepository {
	public function __construct(ManagerRegistry $registry) {
		parent::__construct($registry, PersonDegree::class);
	}

	private function _allPersonDegreeQuery(): string {
		return 'SELECT
    p.id,
    p.firstname,
    p.lastname,
    p.email,
    p.created_date,
    p.check_school,
    p.last_degree_year,
    p.last_degree_month,
    p.type,
    p.other_school,
    p.phone_mobile1,
    p.registration_student_school,
    p.birth_date,
    activity.id AS activity_id,
    activity.name AS activity_name,
    degree.id AS degree_id,
    degree.name AS degree_name,
    country.id AS country_id,
    country.name AS country_name,
    school.id AS school_id,
    school.name AS school_name,
    school_city.name AS school_city_name,
    (IFNULL(
        (SELECT COUNT(*) AS n
             FROM satisfaction_salary s
             WHERE s.person_degree_id = p.id
             GROUP BY s.person_degree_id),
        0)) AS satisfaction_salaries_count,
    (IFNULL(
        (SELECT COUNT(*) AS n
             FROM satisfaction_creator sc
             WHERE sc.person_degree_id = p.id
             GROUP BY sc.person_degree_id),
        0)) AS satisfaction_creators_count,
    (IFNULL(
        (SELECT COUNT(*) AS n
             FROM satisfaction_search ss
             WHERE ss.person_degree_id = p.id
             GROUP BY ss.person_degree_id),
        0)) AS satisfaction_searches_count
FROM person_degree p
         LEFT JOIN country country ON p.id_country = country.id
     LEFT JOIN degree degree ON p.id_degree = degree.id
     LEFT JOIN activity activity ON p.activity_id = activity.id
     LEFT JOIN school school ON p.school_id = school.id
     LEFT JOIN city school_city ON school.id_city = school_city.id ';

	}

	/**
	 * @param int|null $countryId
	 * @return PersonDegreeReadOnly[]
	 * @throws \Exception
	 */
	public function getAllPersonDegree(?int $countryId = null): array {
		$sql = $this->_allPersonDegreeQuery();

		if ($countryId) {
			$sql .= 'WHERE p.id_country = :country_id';
		}
		$statement = $this->_em
			->getConnection()
			->prepare($sql);

		if ($countryId) {
			$result = $statement->executeQuery(['country_id' => $countryId]);
		} else {
			$result = $statement->executeQuery();
		}


		return $this->_toPersonDegreeReadOnly($result->fetchAllAssociative());
	}

	/**
	 * @param int|null $schoolId
	 * @return PersonDegreeReadOnly[]
	 * @throws \Exception
	 */
	public function getAllPersonDegreeOfSchool(?int $schoolId = null): array {
		$sql = $this->_allPersonDegreeQuery();

		if ($schoolId) {
			$sql .= 'WHERE p.school_id = :school_id';
		}

		$statement = $this->_em
			->getConnection()
			->prepare($sql);

		if ($schoolId) {
			$result = $statement->executeQuery(['school_id' => $schoolId]);
		} else {
			$result = $statement->executeQuery();
		}

		return $this->_toPersonDegreeReadOnly($result->fetchAllAssociative());
	}

	/**
	 * @param Country $country
	 * @return PersonDegree[]
	 */
	public function getNameByCountry(Country $country): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country')
			->setParameter('country', $country)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @return PersonDegree[]
	 */
	public function getNameByRegion(Region $region): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region')
			->setParameter('region', $region)
			->getQuery()
			->getResult();
	}

	/**
	 * @param City $city
	 * @return PersonDegree[]
	 */
	public function getNameByCity(City $city): array {
		return $this->createQueryBuilder('s')
			->where('s.addressCity = :city')
			->setParameter('city', $city)
			->getQuery()
			->getResult();
	}

	/**
	 * @param SectorArea $sectorArea
	 * @return PersonDegree[]
	 */
	public function getBySectorArea(SectorArea $sectorArea): array {
		return $this->createQueryBuilder('s')
			->where('s.sectorArea = :sector_area')
			->setParameter('sector_area', $sectorArea)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param SectorArea $sectorArea
	 * @return PersonDegree[]
	 */
	public function getByCountryAndSectorArea(Country $country, SectorArea $sectorArea): array {
		return $this->createQueryBuilder('pd')
			->where('pd.country = :country ')
			->andWhere('pd.sectorArea = :sectorArea')
			->setParameters(['country' => $country, 'sectorArea' => $sectorArea])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param SectorArea $sectorArea
	 * @return PersonDegree[]
	 */
	public function getByRegionAndSectorArea(Region $region, SectorArea $sectorArea): array {
		return $this->createQueryBuilder('pd')
			->where('pd.region = :region ')
			->andWhere('pd.sectorArea = :sectorArea')
			->setParameters(['region' => $region, 'sectorArea' => $sectorArea])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Activity $activity
	 * @return PersonDegree[]
	 */
	public function getByActivity(Activity $activity): array {
		return $this->createQueryBuilder('s')
			->where('s.activity = :activity')
			->setParameter('activity', $activity)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Activity $activity
	 * @return PersonDegree[]
	 */
	public function getByOtherActivity(Activity $activity): array {
		return $this->createQueryBuilder('s')
			->where('s.activity = :activity')
			->setParameter('activity', $activity)
			->getQuery()
			->getResult();
	}

	/**
	 * @param string $type
	 * @return PersonDegree[]
	 */
	public function getByType(string $type): array {
		return $this->createQueryBuilder('s')
			->where('s.type = :type')
			->setParameter('type', $type)
			->getQuery()
			->getResult();
	}

	/**
	 * @param string $contract
	 * @return PersonDegree[]
	 */
	public function getByContract(string $contract): array {
		return $this->createQueryBuilder('s')
			->where('s.contract = :contract')
			->setParameter('contract', $contract)
			->getQuery()
			->getResult();
	}

	/**
	 * @param Country $country
	 * @param string $type
	 * @return PersonDegree[]
	 */
	public function getByCountryAndType(Country $country, string $type): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.type = :type')
			->setParameters(['country' => $country, 'type' => $type])
			->getQuery()
			->getResult();
	}

	/**
	 * @param Region $region
	 * @param string $type
	 * @return PersonDegree[]
	 */
	public function getByRegionAndType(Region $region, string $type): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.type = :type')
			->setParameters(['region' => $region, 'type' => $type])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByFirstNameAndLastNameAndBirthDate(
		string    $firstName,
		string    $lastName,
		?DateTime $birthDate
	): array {
		return $this->createQueryBuilder('s')
			->where('s.firstname = :firstname ')
			->andWhere('s.lastname = :lastname')
			->andWhere('s.birthDate = :birthDate')
			->setParameters(['firstname' => $firstName, 'lastname' => $lastName, 'birthDate' => $birthDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByFirstNameAndLastNameAndBirthDateAndCreatedDate(
		string    $firstName,
		string    $lastName,
		?DateTime $birthDate,
		?DateTime $createdDate
	): array {
		return $this->createQueryBuilder('s')
			->where('s.firstname = :firstname ')
			->andWhere('s.lastname = :lastname')
			->andWhere('s.birthDate = :birthDate')
			->andWhere('s.createdDate = :createdDate')
			->setParameters([
				'firstname' => $firstName,
				'lastname' => $lastName,
				'birthDate' => $birthDate,
				'createdDate' => $createdDate
			])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByFirstnameAndLastameAndCreatedDate(
		string    $firstname,
		string    $lastname,
		?DateTime $createdDate
	): array {
		return $this->createQueryBuilder('s')
			->where('s.firstname = :firstname')
			->andWhere('s.lastname = :lastname')
			->andWhere('s.createdDate = :createdDate')
			->setParameters(['firstname' => $firstname, 'lastname' => $lastname, 'createdDate' => $createdDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndSchool(Country $country, School $school): array {
		return $this->createQueryBuilder('pd')
			->where('pd.country = :country ')
			->andWhere('pd.school = :school')
			->setParameters(['country' => $country, 'school' => $school])
			->getQuery()
			->getResult();
	}

	public function getByCountryBetweenCreatedDateAndEndDate (
		Country   $country,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'beginDate'=> $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	public function getByCountryAndSchoolBetweenCreatedDateAndEndDate (
		Country   $country,
		?School   $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere ('s.school = :school ')
			->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters([
				'country' => $country,
				'school' => $school,
				'beginDate'=> $beginDate,
				'endDate' => $endDate
			])
			->getQuery()
			->getResult();
	}

	public function getByRegionBetweenCreatedDateAndEndDate(
		Region    $region,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'beginDate'=> $beginDate, 'endDate'=>$endDate])
			->getQuery()
			->getResult();
	}


	public function getByRegionAndSchoolBetweenCreatedDateAndEndDate(
		Region    $region,
		?School   $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere ('s.school = :school ')
			->andWhere ('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'school' => $school, 'beginDate'=> $beginDate, 'endDate'=>$endDate])
			->getQuery()
			->getResult();
	}

	public function getByCountryAndTypeBetweenCreatedDateAndEndDate(
		Country   $country,
		string    $type,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.type = :type')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'type' => $type, 'beginDate'=> $beginDate, 'endDate'=>$endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndTypeAndSchoolBetweenCreatedDateAndEndDate(
		Country   $country,
		string    $type,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.type = :type')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'type' => $type, 'school' => $school, 'beginDate'=> $beginDate, 'endDate'=>$endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndTypeBetweenCreatedDateAndEndDate(
		Region    $region,
		string    $type,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.type = :type')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'type' => $type, 'beginDate'=> $beginDate, 'endDate'=>$endDate])
			->getQuery()
			->getResult();
	}


	/**
	 * @param Region $region
	 * @param School $school
	 * @return PersonDegree[]
	 */
	public function getByRegionAndSchool(Region $region, School $school): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.school = :school')
			->setParameters(['region' => $region, 'school' => $school])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndTypeAndSchoolBetweenCreatedDateAndEndDate(
		Region    $region,
		string    $type,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.type = :type')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'type' => $type, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndSectorAreaBetweenCreatedDateAndEndDate(
		Country    $country,
		SectorArea $sectorArea,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.sectorArea = :sectorArea')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'sectorArea' => $sectorArea, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndSectorAreaAndSchoolBetweenCreatedDateAndEndDate(
		Country    $country,
		SectorArea $sectorArea,
		School     $school,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.sectorArea = :sectorArea')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'sectorArea' => $sectorArea, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndSectorAreaBetweenCreatedDateAndEndDate(
		Region     $region,
		SectorArea $sectorArea,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.sectorArea = :sectorArea')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'sectorArea' => $sectorArea, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndSectorAreaAndSchoolBetweenCreatedDateAndEndDate(
		Region     $region,
		SectorArea $sectorArea,
		School     $school,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.sectorArea = :sectorArea')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'sectorArea' => $sectorArea, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getBySectorAreaBetweenCreatedDateAndEndDate(
		SectorArea $sectorArea,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.sectorArea = :sector_area')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['sector_area' => $sectorArea, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getBySectorAreaAndSchoolBetweenCreatedDateAndEndDate(
		SectorArea $sectorArea,
		School     $school,
		?DateTime  $beginDate,
		?DateTime  $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.sectorArea = :sector_area')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->andWhere('s.school = :school')
			->setParameters(['sector_area' => $sectorArea, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByActivityBetweenCreatedDateAndEndDate(
		Activity  $activity,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.activity = :activity')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['activity' => $activity, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByActivityAndSchoolBetweenCreatedDateAndEndDate(
		Activity  $activity,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.activity = :activity')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['activity' => $activity, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByTypeBetweenCreatedDateAndEndDate(
		string    $type,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.type = :type')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['type' => $type, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}
	/**
	 * @param string $type
	 * @param School $school
	 * @return PersonDegree[]
	 */
	public function getByTypeAndSchool(string $type, School $school): array {
		return $this->createQueryBuilder('s')
			->where('s.type = :type')
			->andWhere('s.school = :school')
			->setParameters(['type'=> $type, 'school' => $school])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByTypeAndSchoolBetweenCreatedDateAndEndDate(
		string    $type,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.type = :type')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['type' => $type, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndDegreeBetweenCreatedDateAndEndDate(
		Country   $country,
		Degree    $degree,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.degree = :degree')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'degree' => $degree, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByCountryAndDegreeAndSchoolBetweenCreatedDateAndEndDate(
		Country   $country,
		Degree    $degree,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.country = :country ')
			->andWhere('s.degree = :degree')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['country' => $country, 'degree' => $degree, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndDegreeBetweenCreatedDateAndEndDate(
		Region    $region,
		Degree    $degre,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.degree = :degree')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'degree' => $degre, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @return PersonDegree[]
	 */
	public function getByRegionAndDegreeAndSchoolBetweenCreatedDateAndEndDate(
		Region    $region,
		Degree    $degree,
		School    $school,
		?DateTime $beginDate,
		?DateTime $endDate): array {
		return $this->createQueryBuilder('s')
			->where('s.region = :region ')
			->andWhere('s.degree = :degree')
			->andWhere('s.school = :school')
			->andWhere('s.createdDate BETWEEN :beginDate AND :endDate')
			->setParameters(['region' => $region, 'degree' => $degree, 'school' => $school, 'beginDate' => $beginDate, 'endDate' => $endDate])
			->getQuery()
			->getResult();
	}

	/**
	 * @param School $school
	 * @param boolean $unlocked
	 * @return PersonDegree[]
	 */
	public function getBySchoolAndByUnlocked(School $school, bool $unlocked): array {
		return $this->createQueryBuilder('s')
			->where('s.school = :school ')
			->andWhere('s.unlocked = :unlocked')
			->setParameters(['school' => $school, 'unlocked' => $unlocked])
			->getQuery()
			->getResult();
	}

	/**
	 * @param array $result
	 * @return PersonDegreeReadOnly[]
	 * @throws \Exception
	 */
	private function _toPersonDegreeReadOnly(array $personDegrees): array {
		return array_map(function ($person) {
			return new PersonDegreeReadOnly(
				$person['id'],
				$person['firstname'],
				$person['lastname'],
				$person['email'],
				$person['created_date'] ? new DateTime($person['created_date']) : null,
				$person['check_school'],
				$person['last_degree_year'],
				$person['last_degree_month'],
				$person['type'],
				$person['other_school'],
				$person['phone_mobile1'],
				$person['registration_student_school'],
				$person['birth_date'] ? new DateTime($person['birth_date']) : null,
				$person['activity_id'],
				$person['activity_name'],
				$person['degree_id'],
				$person['degree_name'],
				$person['country_id'],
				$person['country_name'],
				$person['school_id'],
				$person['school_name'],
				$person['school_city_name'],
				$person['satisfaction_searches_count'],
				$person['satisfaction_salaries_count'],
				$person['satisfaction_creators_count'],
			);
		}, $personDegrees);
	}
}
