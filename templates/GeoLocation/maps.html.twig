{% if is_granted('ROLE_ADMIN') == true %} {% set base = 'base.html.twig' %}
{% elseif is_granted('ROLE_ENTREPRISE') == true %} {% set base = 'base_company.html.twig' %}
{% elseif is_granted('ROLE_DIPLOME') == true %} {% set base = 'base_degree.html.twig' %}
{% elseif is_granted('ROLE_ETABLISSEMENT') == true %} {% set base = 'base_school.html.twig' %}
{% elseif is_granted('ROLE_PRINCIPAL') == true %} {% set base = 'base_principal.html.twig' %}
{% elseif is_granted('ROLE_LEGISLATEUR') == true %} {% set base = 'base_legislator.html.twig' %}
{% elseif is_granted('ROLE_DIRECTEUR') == true %} {% set base = 'base_legislator.html.twig' %}
{% else %} {% set base = 'base.html.twig' %}
{% endif %}
{% set roleUser = app.user.roles|role %}

{% extends base %}

{% block title %}AppBundle:GeoLocation:index{% endblock %}

{% block referencement_h1 %}
   {{ parent() }} {{ 'referencement.geolocation' | trans }}
{% endblock %}

{% block body %}
   <div class="content-i">
      <div class="content-box">
         {# Tableau 1 #}
         <div class="element-wrapper">
            <img src="{{ asset('build/images/icon/locality.png') }}" alt="locality" class="title-icon" style="margin-bottom: -35px;">
            <h6 class="element-header">
               Maps
            </h6>
            {{ form_widget(form._token) }}
            <div class="row">
               <div class="col-sm-3 form-group">
                  <label for=""> {{ 'menu.country' | trans }}</label>
                  {{ create_translated_select(form.country) }}
                  {#                  {{ form_widget(form.country) }}#}
                  <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.country) }}</div>
               </div>
               <div class="col-sm-3 form-group">
                  <label for=""> {{ 'menu.region' | trans }} </label>
                  {{ create_translated_select(form.region) }}
                  {#                  {{ form_widget(form.region) }}#}
                  <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.region) }}</div>
               </div>

               {% if prefecture_between_region_city == "true" %}
                  <div class="col-sm-3 form-group">
                     <label for="">{{ 'menu.prefecture' | trans }}</label>
                     {{ create_translated_select(form.prefecture) }}
                     <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.city) }}</div>
                  </div>
               {% endif %}

               <div class="col-sm-3 form-group">
                  <label for="">{{ 'menu.city' | trans }}</label>
                  {{ create_translated_select(form.city) }}
                  <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.city) }}</div>
               </div>

               {% if prefecture_between_region_city != "true" %}
                  <div class="col-sm-3 form-group">
                     <label for=""> {{ 'city.other_city' | trans }} </label>
                     {{ form_widget(form.otherCity) }}
                     <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.otherCity) }}</div>
                  </div>
               {% endif %}
            </div>
            <div class="row">
               {% if roleUser == "Diplômé" or roleUser == "Entreprise" %} <div class="col-sm-6 form-group">
               {% else %} <div class="col-sm-3 form-group"> {% endif %}
                  <label for=""> {{ 'menu.activity_area' | trans }} </label>
                  {{ create_translated_select(form.sectorArea) }}
                  {#                  {{ form_widget(form.sectorArea) }}#}
                  <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.sectorArea) }}</div>
               {% if roleUser == "Diplômé" or roleUser == "Entreprise" %}</div>{% else %}</div>{% endif %}

               {% if roleUser == "Diplômé" or roleUser == "Entreprise" %} <div class="col-sm-6 form-group">
               {% else %} <div class="col-sm-3 form-group"> {% endif %}
                  <label for="">{{ 'menu.job' | trans }} / {{ 'menu.branch' | trans }}</label>
                  {{ create_translated_select(form.activity) }}
{#                  {{ form_widget(form.activity) }}#}
                  <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.activity) }}</div>
               {% if roleUser == "Diplômé" or roleUser == "Entreprise" %}</div>{% else %}</div>{% endif %}

               {% if roleUser != "Diplômé" and roleUser != "Entreprise" %}
                  <div class="col-sm-3 form-group">
                     <label for="">{{ 'menu.establishment' | trans }}</label>
                     {% if roleUser == 'Principal' %}
                        <select id="appbundle_geolocation_school" disabled class="form-control">
                           <option value="">{{ school.name }} ({{ school.city.name }})</option>
                        </select>
                     {% elseif roleUser == 'Etablissement' %}
                        <select id="appbundle_geolocation_school" disabled class="form-control">
                           <option value="">{{ user.school.name }} ({{ user.school.city.name }})</option>
                        </select>
                     {% else %}
                        <select id="appbundle_geolocation_school" class="form-control">
                           <option value="">{{'menu.select' | trans}}</option>
                        </select>
                     {% endif %}
                  </div>
               {% endif %}
            </div>
            <div class="row">
               <div class="col-sm-12">
                  <table class="table table-bordered dt-responsive nowrap table_geo">
                     <tr><div><span class="table_geo_label">{{ 'menu.display_data' | trans }}</span></div></tr>
                     <thead>
                     <tr>
                        <th><div class="table_geo_titre ent d-flex justify-content-around">
                              <span>{{ 'menu.companies' | trans }}</span>
                              <span id="nb_company"></span>
                           </div></th>
                        <th><div class="table_geo_titre eta d-flex justify-content-around">
                              <span>{{ 'menu.establishments' | trans }}</span>
                              <span id="nb_establishment"></span>
                           </div></th>
                        <th><div class="table_geo_titre dip d-flex justify-content-around">
                              <span>{{ 'graduate.graduate_looking_for_job' | trans }}</span>
                              <span id="nb_graduate_looking_for_job"></span>
                           </div></th>
                        <th><div class="table_geo_titre stddip d-flex justify-content-around">
                              <span>{{ 'graduate.study_graduate' | trans }}</span>
                              <span id="nb_other_graduate"></span>
                           </div></th>
                     </tr>
                     </thead>
                     <tbody>
                     <tr>
                        <td >
                           {{ form_widget(form.showCompanies) }}
                           <div class="slider round" id="sliderShowCompanies">
                              <span class="non">{{ 'menu.no' | trans }}</span>
                              <span class="oui">{{ 'menu.yes' | trans }}</span>
                           </div>
                           <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.showCompanies) }}</div>
                        </td>
                        <td >
                           {{ form_widget(form.showSchools) }}
                           <div class="slider round" id="sliderShowSchools">
                              <span class="non">{{ 'menu.no' | trans }}</span>
                              <span class="oui">{{ 'menu.yes' | trans }}</span>
                           </div>
                           <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.showSchools) }}</div>
                        </td>
                        <td >
                           {{ form_widget(form.showSearchPersonDegrees) }}
                           <div class="slider round" id="slidershowSearchPersonDegrees">
                              <span class="non">{{ 'menu.no' | trans }}</span>
                              <span class="oui">{{ 'menu.yes' | trans }}</span>
                           </div>
                           <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.showSearchPersonDegrees) }}</div>
                        </td>
                        <td >
                           {{ form_widget(form.showOtherPersonDegrees) }}
                           <div class="slider round" id="slidershowOtherPersonDegrees">
                              <span class="non">{{ 'menu.no' | trans }}</span>
                              <span class="oui">{{ 'menu.yes' | trans }}</span>
                           </div>
                           <div class="help-block form-text with-errors form-control-feedback">{{ form_errors(form.showOtherPersonDegrees) }}</div>
                        </td>
                     </tr>
                     </tbody>
                  </table>
               </div>
            </div>

            {# Google map #}
            <div id="map" style="width: 100%; height: 600px; border: 1px solid #000; margin-top: 0px"></div>
         </div>
      </div>
      <select hidden id="selectedCountry">
         {%  if selectedCountry %}
            <option value="{{ selectedCountry.id }}">{{ selectedCountry.name }}</option>
         {%  endif %}
      </select>
      <select hidden id="selectedRegions">
         {%  for selectedRegion in selectedRegions  %}
            {% if loop.index <=2 %}
               <option selected value="{{ selectedRegion.id }}">{{ selectedRegion.name }}</option>
            {% else %}
               <option value="{{ selectedRegion.id }}">{{ selectedRegion.name }}</option>
            {% endif %}
         {%  endfor %}
      </select>
      <p id="struct_province_country_city" hidden>{{ struct_province_country_city }}</p>
      <p id="prefecture_between_region_city" hidden>{{ prefecture_between_region_city }}</p>
   </div>
{% endblock %}


{% block js %}
   <script async defer
           src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBy9WBkxvkGzs4tQN-RilyvV6WvWnTInUM&callback"
           type="text/javascript"></script>
   <script type="text/javascript"
           src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
   <script>
      // variables communes aux différentes scripts et functions
      let dataCompanies = [];
      let selectedDataCompanies = [];
      let dataSchools = [];
      let selectedDataSchools = [];
      let dataPersonDegrees = [];
      let selectedDataPersonDegrees = [];
      let dataOtherPersonDegrees = [];
      let selectedDataOtherPersonDegrees = [];
      let input_address_country = "";
      let map = null;
      let geocoder = null;
      let school_icon = "{{ asset('build/images/maps/school.png') }}";
      let company_icon = "{{ asset('build/images/maps/company.png') }}";
      let persondegree_icon = "{{ asset('build/images/maps/degree.png') }}";
      let otherpersondegree_icon = "{{ asset('build/images/maps/studydegree.png') }}";
      let company_cluster_icon = "{{ asset('build/images/maps/company_cluster/m') }}";
      let persondegree_cluster_icon = "{{ asset('build/images/maps/persondegree_cluster/m') }}";
      let otherpersondegree_cluster_icon = "{{ asset('build/images/maps/studypersondegree_cluster/m') }}";
      let school_cluster_icon = "{{ asset('build/images/maps/school_cluster/m') }}";
      let company_markers = [];
      let company_markerCluster = null;
      let school_markers = [];
      let school_markerCluster = null;
      let persondegree_markers = [];
      let persondegree_markerCluster = null;
      let otherpersondegree_markers = [];
      let otherpersondegree_markerCluster = null;

      /**
       * initialisation de la position des inputs
        */
      $('#yourGraduates').prop('checked', false);
      /**
       *  Event
       *  Mise à jour du select métiers/filières en fonction du secteur d'activités
       */
      $(document).on('change', '#appbundle_geolocation_sectorArea', function () {
         let $field = $(this)
         let $sectorAreaField = $('#appbundle_geolocation_sectorArea')
         let $form = $field.closest('form')
         let target = '#' + $field.attr('id').replace('sectorArea', 'activity')

         // Les données à envoyer en Ajax
         let data = {}
         data[$sectorAreaField.attr('name')] = $sectorAreaField.val()

         // On soumet les données
         $.post($form.attr('action'), data).then(function (data) {
            // On récupère le nouveau <select>
            let $input = $(data).find(target)
            // On remplace notre <select> actuel
            $(target).replaceWith($input)

            // Affichage de la région choisie sur la carte googleMap
            $("#appbundle_geolocation_activity").change(function () {
               // console.log('ddddddddddddd')
               deleteAllMarkers();
               selectData();
               viewAllMarkers();
            });
         })
      })

      /**
       *  Event
       *  Mise à jour de Maps lors du change des Pays
       *  Affichage du pays choisi sur la carte googleMap
       */
      $("#appbundle_geolocation_country").change(function () {
         input_address_country = "";
         if($('#struct_province_country_city').text() != "true") {
            input_address_country = $("#appbundle_geolocation_country > option:selected").text();
            let input_address = $("#appbundle_geolocation_country > option:selected").text();
            findDataByCountry();
         }

         let idCountry = $("#appbundle_geolocation_country > option:selected").val();

         changeCountry("#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city", idCountry);

         getGeolocationSchools('#appbundle_geolocation_country', "#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city",
             "#appbundle_geolocation_sectorArea", "#appbundle_geolocation_activity", "#appbundle_geolocation_school");
      });
      
      /**
       *  Event
       *  Mise à jour de Maps lors du change des régions
       */
      $("#appbundle_geolocation_region").change(function () {
         let regionId = $('#appbundle_geolocation_region option:selected').val();
         let citySelectedId = $('#appbundle_geolocation_city option:selected').val();
         if(!regionId) {
            $("#appbundle_geolocation_country").trigger('change');
         } else {
            if($('#struct_province_country_city').text() == "true") {
               input_address_country = $("#appbundle_geolocation_region > option:selected").text();
               findDataByRegion();
            }
            changeRegion("#appbundle_geolocation_prefecture", "#appbundle_geolocation_city", regionId, citySelectedId);
            selectData();

            let input_address = $("#appbundle_geolocation_country > option:selected").text() + "," + $("#appbundle_geolocation_region > option:selected").text();
            if($('#struct_province_country_city').text() == "true") {
               input_address = $("#appbundle_geolocation_region > option:selected").text();
            }
            initMap(input_address_country + " " + input_address, 11);

            getGeolocationSchools('#appbundle_geolocation_country', "#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city",
                "#appbundle_geolocation_sectorArea", "#appbundle_geolocation_activity", "#appbundle_geolocation_school");
         }
      });
      /**
       *  Event
       *  Mise à jour de Maps lors du change des prefectures
       */
      if($("#appbundle_geolocation_prefecture").length) {
         $("#appbundle_geolocation_prefecture").change(function () {
            if ($('#appbundle_geolocation_prefecture').length) {
               let prefectureId = $('#appbundle_geolocation_prefecture option:selected').val();
               let citySelectedId = $('#appbundle_geolocation_city option:selected').val();

               if(!prefectureId) {
                  $("#appbundle_geolocation_region").trigger('change');
               } else {
                  changePrefecture("#appbundle_geolocation_city", prefectureId, citySelectedId);
                  selectData();

                  let input_address = $("#appbundle_geolocation_region  option:selected").text() + " " + $("#appbundle_geolocation_prefecture  option:selected").text();
                  initMap(input_address, 13);

                  getGeolocationSchools('#appbundle_geolocation_country', "#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city",
                      "#appbundle_geolocation_sectorArea", "#appbundle_geolocation_activity", "#appbundle_geolocation_school");
               }
            }
         });
      }

      /**
       *  Event
       *  Mise à jour de Maps lors du change des villes
       */
      $("#appbundle_geolocation_city").change(function () {
         let cityId = $('#appbundle_geolocation_city option:selected').val();
         let cityName = $('#appbundle_geolocation_city option:selected').text();

         // chechOff myGraduates if city different of school city
         let citySchoolSelected = extractCityFromSelectedSchool();
         if(citySchoolSelected != cityName) {
            $('#appbundle_geolocation_yourGraduates').prop('checked', false);
         }

         //simulate change on prefecture or region
         if(!cityId) {
            if($("#appbundle_geolocation_city option").length > 1) {
               $("#appbundle_geolocation_prefecture").trigger('change');
            } else {
               $("#appbundle_geolocation_region").trigger('change');
            }
         //update datas and maps
         } else {
            changeCity("#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city", cityId);
            selectData();
            appbundle_geolocation_city_init_map();

            getGeolocationSchools('#appbundle_geolocation_country', "#appbundle_geolocation_region", "#appbundle_geolocation_prefecture", "#appbundle_geolocation_city",
                "#appbundle_geolocation_sectorArea", "#appbundle_geolocation_activity", "#appbundle_geolocation_school");
         }
      });


      /**
       *  Event
       *  Mise à jour de Maps lors du change des établissements
       */
      // $("#appbundle_geolocation_school").change(function () {
      //    let schoolId = $('#appbundle_geolocation_school option:selected').val();
      //    deleteAllMarkers();
      //    selectData();
      //    viewAllMarkers();
      //    appbundle_geolocation_city_init_map();
      //    // console.log("test",selectedDataPersonDegrees)
      // });


      /**
       *  Event
       *  Affichage d'une autre ville choisie sur la carte googleMap
       */
      $("#appbundle_geolocation_otherCity").change(function () {
         let input_address = $("#appbundle_geolocation_otherCity").val();
         selectData();
         initMap(input_address_country + " " + input_address, 16);
      });

      /**
       *  Event
       *  Affichage d'un secteur d'activité choisie sur la carte googleMap
       */
      $("#appbundle_geolocation_sectorArea").change(function () {
         deleteAllMarkers();
         selectData();
         viewAllMarkers();
      });


      /**
       *  Event
       *  Filtrage des diplômés de l'établissement séléctionné
       */
      $('#appbundle_geolocation_school').change(function () {
         deleteAllMarkers();
         let citySchoolSelected = extractCityFromSelectedSchool();

         $('#appbundle_geolocation_city option:selected').prop('selected',false);
         $('#appbundle_geolocation_city option').each(function () {
            if ($(this).text() == citySchoolSelected) {
               $(this).prop('selected', true);
               changeCity('#appbundle_geolocation_region', '#appbundle_geolocation_prefecture', '#appbundle_geolocation_city', $(this).val());
            }
         });

         $('#appbundle_geolocation_yourGraduates').prop('checked', false);
          //select the city of school and update region and prefecture
            // if($('#appbundle_geolocation_yourGraduates').is(':checked')) {
            /*if($('#appbundle_geolocation_school option:selected').val()) {
               $('#appbundle_geolocation_region option:selected').prop('selected',false);
               $('#appbundle_geolocation_region option:first').prop('selected',true);
               $('#appbundle_geolocation_region').trigger('change');

               setTimeout(function () {
                  $('#appbundle_geolocation_city option:selected').prop('selected',false);
                  $('#appbundle_geolocation_city option').each(function () {
                     if ($(this).text() == citySchoolSelected) {
                        $(this).prop('selected', true);
                     }
                  });
                  setTimeout(function () {
                     if($('#appbundle_geolocation_city option:selected')) {
                        $('#appbundle_geolocation_city').trigger('change');
                     }
                  }, 1000);
               }, 1000);
            }*/
            selectData();
            viewAllMarkers();
      })

      $('#appbundle_geolocation_yourGraduates').change(function () {
         selectData();
         viewAllMarkers();
      })

      /**
       *  Event
       *  Affichage des entreprises sur la carte
       *  L'affichage se fait soit par pays, region ou ville
       */
      $('#appbundle_geolocation_showCompanies').change(function () {
         company_markerCluster = showMapData("#appbundle_geolocation_showCompanies", company_markers, company_icon, company_markerCluster, company_cluster_icon, selectedDataCompanies)
      })

      /**
       *  Event
       *  Affichage des ecoles sur la carte
       *  L'affichage se fait soit par pays, region ou ville
       */
      $('#appbundle_geolocation_showSchools').change(function () {
         school_markerCluster = showMapData("#appbundle_geolocation_showSchools", school_markers, school_icon, school_markerCluster, school_cluster_icon, selectedDataSchools)
      })

      /**
       *  Event
       *  Affichage des diplômés en recherche sur la carte
       *  L'affichage se fait soit par pays, region ou ville
       */
      $('#appbundle_geolocation_showSearchPersonDegrees').change(function () {
         persondegree_markerCluster = showMapData("#appbundle_geolocation_showSearchPersonDegrees", persondegree_markers, persondegree_icon, persondegree_markerCluster, persondegree_cluster_icon, selectedDataPersonDegrees,)
      })

      /**
       *  Event
       *  Affichage des autres diplômés sur la carte
       *  L'affichage se fait soit par pays, region ou ville
       */
      $('#appbundle_geolocation_showOtherPersonDegrees').change(function () {
         otherpersondegree_markerCluster = showMapData("#appbundle_geolocation_showOtherPersonDegrees", otherpersondegree_markers, otherpersondegree_icon, otherpersondegree_markerCluster, otherpersondegree_cluster_icon, selectedDataOtherPersonDegrees)
      })

      // Si la ville n'est pas déja sélectionnée, simule un click sur le Pays pour accéder aux Regions
      // if($('#selectedRegions option').length == 0) {
         if (($('#selectedCountry').val() !== '') &&
             ($('#selectedCountry').val() !== null)) {
            $('#appbundle_geolocation_country option[value="' + $('#selectedCountry').val() + '"]').prop("selected",true);
            $('#appbundle_geolocation_country').trigger('change');
         }

      let translations = [];
      getTranslation().then (function (translation) {
         translations = translation;
         //patch for have to wait to select city for running maps
         $('#appbundle_geolocation_region option[value=""]').prop("selected", true);
         $('#appbundle_geolocation_region option[value=""]').text(translations["js.select_region"]);

         if(!navigator.onLine) {
            alert(translations["js.no_internet_connexion"])
         }
         window.addEventListener("offline", function() {
            alert(translations["js.no_internet_connexion"]);
         })
      });

      /**
       *  Function
       *  Definition initMap
       *  Paramètres d'initiations de l'API Google Maps
       */
      function initMap(input_address, zoomSize) {
         if(input_address) {
            console.log('Adresse Choisie: ' + input_address);
            // console.log('Zoom: ' + zoomSize);

            map = new google.maps.Map(document.getElementById('map'), {zoom: zoomSize});
            geocoder = new google.maps.Geocoder;

            geocoder.geocode({'address': input_address}, function (results, status) {
               if (status == 'OK') {
                  map.setCenter(results[0].geometry.location);
               } else {
                  window.alert('Echec de recherche Geocode : ' + status);
               }
            });

            // initialisation des Clusters
            if(company_markerCluster == null) {
               company_markerCluster = createClusterData(company_markers, company_cluster_icon);
            }
            if(school_markerCluster == null) {
               school_markerCluster = createClusterData(school_markers, school_cluster_icon);
            }
            if(persondegree_markerCluster == null) {
               persondegree_markerCluster = createClusterData(persondegree_markers, persondegree_cluster_icon);
            }
            if(otherpersondegree_markerCluster == null) {
               otherpersondegree_markerCluster = createClusterData(otherpersondegree_markers, otherpersondegree_cluster_icon);
            }

            viewAllMarkers();
         }
      }

      /**
       *  Génère les tables entreprise, établissements et
       *  diplômé en fonction du pays sélectionné
       */
      async function findDataByCountry() {
         // initialisation des tables de données
         dataCompanies = [];
         dataPersonDegrees = [];
         dataOtherPersonDegrees = [];
         dataSchools = [];

         let idCountry = $('#appbundle_geolocation_country option:selected').val()

         let url = window.location.href;
         if (idCountry) {
            url += 'country/' + idCountry ;
         }
         // console.log("-->" + url);

         if (url != window.location.href) {
            // Recupère les entreprises en Bdd
            await $.get((url+'/company'), function (data) {
               dataCompanies = [];
               dataCompanies = data;
               console.log(url+'/company' + "  compagnies récupérées : " + dataCompanies.length)
            })

            // Recupère les établissements en Bdd
            await $.get((url+'/school'), function (data) {
               dataSchools = [];
               dataSchools = data;

               console.log("etablissements récupérées: " + dataSchools.length)
            })

            // Recupère les diplômés en recherche d'emploi en Bdd
            console.log("Ajax personDegreesGeo : " + url +'/unemployedpersondegree');
            await $.get((url+'/unemployedpersondegree'), function (data) {
               dataPersonDegrees = [];
               dataPersonDegrees = data;
               console.log("diplômés récupérés: " + dataPersonDegrees.length);
               setTimeout(function () {
                  selectData();
                  setTimeout(function () {
                     initMap(input_address_country, 7);
                     console.log("datas selected");
                  }, 1000);
               }, 1000);
            })

            // Recupère les autres diplômés  en Bdd
            console.log("Ajax personDegreesGeo : " + url +'/otherpersondegree');
            await $.get((url+'/otherpersondegree'), function (data) {
               dataOtherPersonDegrees = [];
               dataOtherPersonDegrees = data;
               console.log("diplômés récupérés: " + dataOtherPersonDegrees.length);
               setTimeout(function () {
                  selectData();
                  setTimeout(function () {
                     initMap(input_address_country, 7);
                     console.log("datas selected");
                  }, 1000);
               }, 1000);
            })
         }
      }

      /**
       *  Adaptation DBTA (STRUCT_PROVINCE_COUNTRY_CITY)
       *  Génère les tables entreprise, établissements et
       *  diplômé en fonction de la région sélectionnée
       */
      async function findDataByRegion() {
         // initialisation des tables de données
         dataCompanies = [];
         dataPersonDegrees = [];
         dataOtherPersonDegrees = [];
         dataSchools = [];

         let idRegion = $('#appbundle_geolocation_region option:selected').val()

         let url = window.location.href;
         if (idRegion) {
            url += 'region/' + idRegion ;
         }
         // console.log("-->" + url);

         if (url != window.location.href) {
            // Recupère les entreprises en Bdd
            await $.get((url+'/company'), function (data) {
               dataCompanies = [];
               dataCompanies = data;
               console.log(url+'/company' + "  compagnies récupérées : " + dataCompanies.length)
            })

            // Recupère les établissements en Bdd
            await $.get((url+'/school'), function (data) {
               dataSchools = [];
               dataSchools = data;
               console.log("etablissements récupérées: " + dataSchools.length)
            })

            // Recupère les diplômés en recherche d'emploi en Bdd
            console.log("Ajax personDegreesGeo : " + url +'/unemployedpersondegree');
            await $.get((url+'/unemployedpersondegree'), function (data) {
               dataPersonDegrees = [];
               dataPersonDegrees = data;
               console.log("diplômés récupérés: " + dataPersonDegrees.length);
               setTimeout(function () {
                  selectData();
                  setTimeout(function () {
                     initMap(input_address_country, 7);
                     console.log("datas selected");
                  }, 1000);
               }, 1000);
            })

            // Recupère les autres diplômés  en Bdd
            console.log("Ajax personDegreesGeo : " + url +'/otherpersondegree');
            await $.get((url+'/otherpersondegree'), function (data) {
               dataOtherPersonDegrees = [];
               dataOtherPersonDegrees = data;
               console.log("diplômés récupérés: " + dataOtherPersonDegrees.length);
               setTimeout(function () {
                  selectData();
                  setTimeout(function () {
                     initMap(input_address_country, 7);
                     console.log("datas selected");
                  }, 1000);
               }, 1000);
            })
         }
      }

      /**
       *  Génère les tables entreprise, établissements et
       *  diplômé en fonction des autres inputs que country
       */
      function selectData() {
         // initialisation des tables de données
         selectedDataCompanies = [];
         selectedDataSchools = [];
         selectedDataPersonDegrees = [];
         selectedDataOtherPersonDegrees = [];

         let valueRegion = $('#appbundle_geolocation_region option:selected').text()
         // let valuePrefecture = null
         // if($('#prefecture_between_region_city').text() == 'true') {
            let valuePrefecture = $('#appbundle_geolocation_prefecture option:selected').text()
         // }
         let valueCity = $('#appbundle_geolocation_city option:selected').text()
         let valueSectorArea = $('#appbundle_geolocation_sectorArea option:selected').text()
         let valueActivity = $('#appbundle_geolocation_activity option:selected').text()
         let valueSchool = "select";

         if($('#appbundle_geolocation_yourGraduates').is(':checked')) {
            if($('#appbundle_geolocation_school').is(':enabled ')) {
               valueSchool = $('#appbundle_geolocation_school option:selected').text();
            } else {
               valueSchool = $('#appbundle_geolocation_school option:first').text();
            }
         }

         console.log("valueCity= " + valueCity + " valueSectorArea= " + valueSectorArea)
         console.log("--->>> valueSchool= " + valueSchool )

         // Selection des Entreprises
         // -------------------------
         $.each(dataCompanies, function (index, value) {
            let selected = true;
            // console.log(value)
            // console.log(index + " region=" + value.region + " city=" + value.city  + " sa=" + value.sector_area);
            // if (! valueSectorArea.toLowerCase().replace('é','e').startsWith('selectionnez')) {
            if (! valueSectorArea.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.sector_area]; if(!val) val = value.sector_area; if(!val) val = "";
               if(val.toLowerCase() != valueSectorArea.toLowerCase()) {
                  selected = false;
               }
            }
            if (! valueCity.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.city]; if(!val) val = value.city; if(!val) val = "";
               if(val.toLowerCase() != valueCity.toLowerCase()) {
                  selected = false;
               }
            }
            if($('#prefecture_between_region_city').text() == 'true') {
               if (selected && (!valuePrefecture.toLowerCase().replace('é', 'e').startsWith('selec'))) {
                  let val = translations[value.prefecture]; if(!val) val = value.prefecture; if(!val) val = "";
                  if(val.toLowerCase() != valuePrefecture.toLowerCase()) {
                     selected = false;
                  }
               }
            }
            if($('#struct_province_country_city').text() != "true") {
               if (selected && (!valueRegion.toLowerCase().replace('é', 'e').startsWith('selec'))) {
                  let val = translations[value.region]; if(!val) val = value.region; if(!val) val = "";
                  if(val.toLowerCase() != valueRegion.toLowerCase()) {
                     selected = false;
                  }
               }
            }

            if (! valueSchool.toLowerCase().replace('é','e').startsWith('selec')) {
               //console.log(value)
               let valSchoolnames = value.schools.split(',');
               let valSchool = valueSchool.substring(0, valueSchool.indexOf('(')).trim();
               console.log(valSchoolnames)

               let schoolExist = false;
               for (let i=0; i<valSchoolnames.length; i++) {
                  console.log("-->" , valSchoolnames[i] , valSchool)
                  if(valSchoolnames[i] == valSchool) {
                     schoolExist = true;
                  }
               }
               if(schoolExist == false) {
                  selected = false;
               }
            }

            if (selected) {
               selectedDataCompanies.push(dataCompanies[index]);
            }
         })
         console.log("compagnies sélectionnées : " + selectedDataCompanies.length);
         $('#nb_company').text(selectedDataCompanies.length);

         // Selection des Etablissements
         // -----------------------------
         $.each(dataSchools, function (index, value) {
            let selected = true;

            if (! valueActivity.toLowerCase().replace('é','e').startsWith('selec')) {

               let activityexist = false;
               $.each(value.activity1, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               $.each(value.activity2, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               $.each(value.activity3, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               $.each(value.activity4, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               $.each(value.activity5, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               $.each(value.activity6, function (index2, value2) {
                  let val = translations[value2]; if(!val) val = value2; if(!val) val = "";
                  if(val.toLowerCase() == valueActivity.toLowerCase()) {
                     activityexist = true;
                  }
               });
               if (activityexist==false)
                  selected = false;
            }

            if (! valueSectorArea.toLowerCase().replace('é','e').startsWith('selec')) {
               let val1 = translations[value.sector_area1]; if(!val1) val1 = value.sector_area1; if(!val1) val1 = "";
               let val2 = translations[value.sector_area2]; if(!val2) val2 = value.sector_area2; if(!val2) val2 = "";
               let val3 = translations[value.sector_area3]; if(!val3) val3 = value.sector_area3; if(!val3) val3 = "";
               let val4 = translations[value.sector_area4]; if(!val4) val4 = value.sector_area4; if(!val4) val4 = "";
               let val5 = translations[value.sector_area5]; if(!val5) val5 = value.sector_area5; if(!val5) val5 = "";
               let val6 = translations[value.sector_area6]; if(!val6) val6 = value.sector_area6; if(!val6) val6 = "";
               // console.log(" |" + val1 + " | " + value.sector_area1 + " | " + valueSectorArea + " |")
               if((val1.toLowerCase() != valueSectorArea.toLowerCase()) &&
                       (val2.toLowerCase() != valueSectorArea.toLowerCase()) &&
                       (val3.toLowerCase() != valueSectorArea.toLowerCase()) &&
                       (val4.toLowerCase() != valueSectorArea.toLowerCase()) &&
                       (val5.toLowerCase() != valueSectorArea.toLowerCase()) &&
                       (val6.toLowerCase() != valueSectorArea.toLowerCase()))
                  selected = false;
            }

            if (! valueCity.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.city]; if(!val) val = value.city; if(!val) val = "";
               if(val.toLowerCase() != valueCity.toLowerCase())
                  selected = false;
            }

            if($('#prefecture_between_region_city').text() == 'true') {
               if (selected && (!valuePrefecture.toLowerCase().replace('é', 'e').startsWith('selec'))) {
                  let val = translations[value.prefecture]; if(!val) val = value.prefecture; if(!val) val = "";
                  if (val.toLowerCase() != valuePrefecture.toLowerCase())
                     selected = false;
               }
            }

            if($('#struct_province_country_city').text() != "true") {
               if (selected && (!valueRegion.toLowerCase().replace('é', 'e').startsWith('selec'))) {
                  let val = translations[value.region]; if(!val) val = value.region; if(!val) val = "";
                  if (val.toLowerCase() != valueRegion.toLowerCase())
                     selected = false;
               }
            }

            if (! valueSchool.toLowerCase().replace('é','e').startsWith('selec')) {
               let valName = value.name.trim();
               let valSchool = valueSchool.substring(0, valueSchool.indexOf('(')).trim();

               if(valName.toLowerCase() != valSchool.toLowerCase()) {
                  selected = false;
               }
            }

            if (selected) {
               // console.log(dataSchools[index]);
               selectedDataSchools.push(dataSchools[index]);
            }
         })
         console.log("etablissements sélectionnées: " + selectedDataSchools.length);
         $('#nb_establishment').text(selectedDataSchools.length);

         // Selection des Dipômés en recherche
         // ----------------------------------
         // console.log("dataPersonDegrees = " + dataPersonDegrees.length);
         $.each(dataPersonDegrees, function (index, value) {
            let selected = true;

            if (! valueSectorArea.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.sector_area]; if(!val) val = value.sector_area; if(!val) val = "";
               if(val.toLowerCase() != valueSectorArea.toLowerCase())
                  selected = false;
            }

            if (! valueActivity.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.activity]; if(!val) val = value.activity; if(!val) val = "";
               if(val != valueActivity)
                  selected = false;
            }

            if($('#struct_province_country_city').text() != "true") {
               if (!valueRegion.toLowerCase().replace('é', 'e').startsWith('selec')) {
                  let val = translations[value.region]; if(!val) val = value.region; if(!val) val = "";
                  if (val != valueRegion)
                     selected = false;
                  // console.log("champs: |" + valueRegion + "|" + value.region + "|" );
               }
            }

            if($('#prefecture_between_region_city').text() == 'true') {
               if (!valuePrefecture.toLowerCase().replace('é', 'e').startsWith('selec')) {
                  let val = translations[value.prefecture]; if(!val) val = value.prefecture; if(!val) val = "";
                  if (val != valuePrefecture)
                     selected = false;
               }
            }

            if (! valueCity.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.city]; if(!val) val = value.city; if(!val) val = "";
               if(val != valueCity)
                  selected = false;
            }

            if (! valueSchool.toLowerCase().replace('é','e').startsWith('selec')) {
               let valPersonDegreeSchool = value.school.trim();
               let valSchool = valueSchool.substring(0, valueSchool.indexOf('(')).trim();

               if(valPersonDegreeSchool.toLowerCase() != valSchool.toLowerCase()) {
                  selected = false;
               }
            }

            if (selected) {
               selectedDataPersonDegrees.push(dataPersonDegrees[index]);
            }
         })
         console.log("diplômés en recherche sélectionnées: " + selectedDataPersonDegrees.length);
         $('#nb_graduate_looking_for_job').text(selectedDataPersonDegrees.length);

         // Selection des autres Dipômés
         // ----------------------------
         // console.log("dataOtherPersonDegrees = " + dataOtherPersonDegrees.length);
         $.each(dataOtherPersonDegrees, function (index, value) {
            let selected = true;

            if (! valueSectorArea.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.sector_area]; if(!val) val = value.sector_area; if(!val) val = "";
               if(val.toLowerCase() != valueSectorArea.toLowerCase())
                  selected = false;
            }

            if (! valueActivity.toLowerCase().replace('é','e').startsWith('selec')) {
               let val = translations[value.activity]; if(!val) val = value.activity; if(!val) val = "";
               if(val.toLowerCase() != valueActivity.toLowerCase())
                  selected = false;
            }

            if($('#appbundle_geolocation_yourGraduates').not(':checked')) {
               if($('#struct_province_country_city').text() != "true") {
                  if (!valueRegion.toLowerCase().replace('é', 'e').startsWith('selec')) {
                     let val = translations[value.region]; if(!val) val = value.region; if(!val) val = "";
                     if(val.toLowerCase() != valueRegion.toLowerCase())
                        selected = false;
                     // console.log("champs: |" + valueRegion + "|" + value.region + "|" );
                  }
               }

               if ($('#prefecture_between_region_city').text() == 'true') {
                  if (selected && (!valuePrefecture.toLowerCase().replace('é', 'e').startsWith('selec'))) {
                     let val = translations[value.prefecture]; if(!val) val = value.prefecture; if(!val) val = "";
                     if(val.toLowerCase() != valuePrefecture.toLowerCase())
                        selected = false;
                  }
               }

               if (!valueCity.toLowerCase().replace('é', 'e').startsWith('selec')) {
                  let val = translations[value.city]; if(!val) val = value.city ; if(!val) val = "";
                  if(val.toLowerCase() != valueCity.toLowerCase())
                     selected = false;
               }
            }

            if (! valueSchool.toLowerCase().replace('é','e').startsWith('selec')) {
               let valPersonDegreeSchool = value.school.trim();
               let valSchool = valueSchool.substring(0, valueSchool.indexOf('(')).trim();

               if(valPersonDegreeSchool.toLowerCase() != valSchool.toLowerCase()) {
                  selected = false;
               }
            }

            if (selected) {
               selectedDataOtherPersonDegrees.push(dataOtherPersonDegrees[index]);
            }
         })
         console.log("autres diplômés sélectionnées: " + selectedDataOtherPersonDegrees.length);
         $('#nb_other_graduate').text(selectedDataOtherPersonDegrees.length);
         console.log("--------------------------");
      }

      /**
       *  Affichage des entreprises sur la carte
       *  L'affichage se fait soit par pays, region ou ville
       */
      function showMapData(idCheckbox, markers, markerIcon, markerCluster, markerClusterIcon, selectedData) {
         if(map) {
            let isChecked = $(idCheckbox + ':checked').val();
            if (isChecked == 1) {
               markers = createMarkersData(selectedData, markerIcon);
               markerCluster = createClusterData(markers, markerClusterIcon);

            } else {
               deleteMarkersData(markers);
               deleteClusterData(markerCluster);
            }
            return markerCluster;
         }
      }

      /**
       *  Creation des Markers pour Maps
       *  en fonction des données sélectionnées
       */
      function createMarkersData(SelectedData, icon) {
         markers = [];
         infoWindows = [];
         $.each(SelectedData, function (index, value) {
            // console.log("|" + value.name + " -> " + value.lat + ',' + value.lng + "|");
            let marker = new google.maps.Marker({
               map: map,
               position: new google.maps.LatLng(value.lat, value.lng),
               icon: icon,
               title: value.name
            });
            let sectorsTrans = translateData(value.sector_area, ',');
            let activitiesTrans = translateData(value.activity, ',');
            let contentString  = '<div class="infoMaps">';
            contentString += '<h3>' + value.name + '</h3>';
            contentString  += '<p> <span> email: </span> <span>' + value.email + '</span></p>';
            contentString  += '<p> <span>tel.:</span> <span>' + value.phone + '</span></p>';
            contentString  += '<p> <span>Secteur:</span> <span>' + sectorsTrans + '</span></p>';
            if((value.activity != '')&&(value.activity != null)) {
               contentString  += '<p> <span>Filière:</span> <span>' + activitiesTrans + '</span></p>';
            };
            contentString += '</div>';
            let infowindow = new google.maps.InfoWindow({
               content: contentString
            });

            marker.addListener('click', function() {
               infowindow.open(map, marker);
            });

            markers.push(marker);
            infoWindows.push(infowindow);
         })
         return markers;
      }

      /**
       * Traduction des données
       */
      function translateData(data, char) {
         if (typeof data == "string") {
            if (char) {
               let dataSplit = data.split(char);
               if (dataSplit) {
                  let result = "";
                  for (let i=0; i<dataSplit.length; i++) {
                     if(translations[dataSplit[i].trim()]) {
                        result += translations[dataSplit[i].trim()]
                     } else {
                        result += dataSplit[i]
                     }
                     if(dataSplit[i] != dataSplit.slice(-1)) {
                        result += "<br>"
                     }
                  }
                  return result;
               }
            }
            if(translations[data]) {
               return translations[data.trim()]
            } else {
               return data.trim();
            }
         }
      }

      /**
       *  Suppression des Markers pour Maps
       */
      function deleteMarkersData(markers) {
         $.each(markers , function (index, value) {
            markers[index].setMap(null);
         })
      }

      /**
       *  Creation des Clusters de Markers pour Maps
       */
      function createClusterData(markers, icon) {
         let markerClusterOptions = {
            maxZoom: 9,
            imagePath: icon
         };
         let markerCluster = new MarkerClusterer(map, markers, markerClusterOptions);

         return markerCluster;
      }

      /**
       *  Suppression des Clusters de Markers pour Maps
       */
      function deleteClusterData(clusterData) {
         if(clusterData != null) {
            if(clusterData.getMarkers().length) {
               clusterData.clearMarkers();
            }
         }
      }

      /**
       *  Affiche tous les markeurs et clusters
       */
      function viewAllMarkers() {
         persondegree_markerCluster = showMapData("#appbundle_geolocation_showSearchPersonDegrees", persondegree_markers, persondegree_icon, persondegree_markerCluster, persondegree_cluster_icon, selectedDataPersonDegrees)
         otherpersondegree_markerCluster = showMapData("#appbundle_geolocation_showOtherPersonDegrees", otherpersondegree_markers, otherpersondegree_icon, otherpersondegree_markerCluster, otherpersondegree_cluster_icon, selectedDataOtherPersonDegrees)
         company_markerCluster = showMapData("#appbundle_geolocation_showCompanies", company_markers, company_icon, company_markerCluster, company_cluster_icon, selectedDataCompanies)
         school_markerCluster = showMapData("#appbundle_geolocation_showSchools", school_markers, school_icon, school_markerCluster, school_cluster_icon, selectedDataSchools)
      }

      function deleteAllMarkers() {
         deleteMarkersData(persondegree_markers);
         deleteClusterData(persondegree_markerCluster);
         deleteMarkersData(otherpersondegree_markers);
         deleteClusterData(otherpersondegree_markerCluster);
         deleteMarkersData(company_markers);
         deleteClusterData(company_markerCluster);
         deleteMarkersData(school_markers);
         deleteClusterData(school_markerCluster);
      }

      function appbundle_geolocation_city_init_map() {
         let input_address = $("#appbundle_geolocation_region > option:selected").text();
         selectData();

         if (!$("#appbundle_geolocation_city > option:selected").text().toLowerCase().replace('é', 'e').startsWith('selectionnez')) {
            input_address = $("#appbundle_geolocation_city > option:selected").text();
         }
         if ($("#appbundle_geolocation_city > option:selected").text().toLowerCase().replace('é', 'e').startsWith('selectionnez')) {
            initMap(input_address_country + " " + input_address, 7);
         } else {
            initMap(input_address_country + " " + input_address, 12);
         }
      }

      function extractCityFromSelectedSchool() {
         // let citySchoolSelected = $('#appbundle_geolocation_school option[value=""]').text();
         let citySchoolSelected = $('#appbundle_geolocation_school option:selected').text();
         citySchoolSelected = citySchoolSelected.substr(citySchoolSelected.indexOf('(')+1);
         citySchoolSelected = citySchoolSelected.slice(0, citySchoolSelected.length - 1);
         return (citySchoolSelected)
      }

      // mise à jour des établissements en fonction des autres filtres
      function getGeolocationSchools(idCountry, idRegion, idPrefecture, idCity, idSectorArea, idActivity, idSchool) {
         let countryId = $(idCountry).val();
         let regionId = $(idRegion).val();
         let prefectureId = $(idPrefecture).val();
         let cityId = $(idCity).val();
         let sectorAreaId = $(idSectorArea).val();
         let activityId = $(idActivity).val();
         let schoolId = $(idSchool).val();
         let schools = [];

         // find schools of country
         if(countryId && !regionId) {
            // alert("country")
            removeOptions(idSchool);
            let baseUrl = getUrlCurrentLocale();
            let url = baseUrl + "getSchoolsByCountry";

            let data = {"countryId" : countryId };
            $.get(url, data).done(function (result) {
               createSortedOptions(idSchool, result, null);
            })
         }

         // find schools of region
         // if($('#prefecture_between_region_city') == "true" && regionId ) {
         if(regionId && !prefectureId && !cityId) {
            // alert("region")
            removeOptions(idSchool);
            let baseUrl = getUrlCurrentLocale();
            let url = baseUrl + "getSchoolsByRegion";

            let data = {"regionId" : regionId };
            $.get(url, data).done(function (result) {
               createSortedOptions(idSchool, result, null);
            })
         }

         // find schools of prefecture
         if(prefectureId && !cityId) {
            // alert("prefecture");
            removeOptions(idSchool);
            let baseUrl = getUrlCurrentLocale();
            let url = baseUrl + "getSchoolsByPrefecture";

            let data = {"prefectureId" : prefectureId };
            $.get(url, data).done(function (result) {
               createSortedOptions(idSchool, result, null);
            })
         }

         if(cityId) {
            setTimeout(function () {
               removeOptions(idSchool);
               let baseUrl = getUrlCurrentLocale();
               let url = baseUrl + "getSchoolsByCity";

               let data = {"cityId" : cityId };
               $.get(url, data).done(function (result) {
                  createSortedOptions($(idSchool), result, null);
               })
            }, 2000);
         }
      }
      $(document).ready(function () {
         // console.log($('#selectCountry option:first').val())

         // $("#appbundle_geolocation_country").val($('#selectCountry option:first').val());
         // $("#appbundle_geolocation_country").trigger('change');
      })
   </script>
{% endblock %}
