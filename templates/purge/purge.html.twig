{% if is_granted('ROLE_ADMIN') == true %} {% set base = 'base.html.twig' %}
{% elseif is_granted('ROLE_ENTREPRISE') == true %} {% set base = 'base_company.html.twig' %}
{% elseif is_granted('ROLE_DIPLOME') == true %} {% set base = 'base_degree.html.twig' %}
{% elseif is_granted('ROLE_ETABLISSEMENT') == true %} {% set base = 'base_school.html.twig' %}
{% elseif is_granted('ROLE_LEGISLATEUR') == true %} {% set base = 'base_legislator.html.twig' %}
{% else %} {% set base = 'base.html.twig' %}
{% endif %}

{% extends base %}

{% block title %}AppBundle:Nettoyage:index{% endblock %}

{% block body %}
   <div class="content-i">
      <div class="content-box form-global">
         <div class="element-wrapper">
            <img src="{{ asset('build/images/icon/purge.png') }}" alt="locality" class="title-icon" style="margin-bottom: -35px;">
            <h6 class="element-header"> {{ 'menu.cleaning' | trans}} </h6>

            <div class="row cleanMenu">
               <div class="col-3 menuDown" id="menuActor" onclick="activateActorMenu()">
                  <p>{{ 'menu.actor' | trans}}</p>
               </div>
               <div class="col-3 menuUp" id="menuOffer" onclick="activateOfferMenu()">
                  <p>{{ 'menu.offer' | trans}}</p>
               </div>
               <div class="col-3 menuUp" id="menuLocalization" onclick="activateLocalizationMenu()">
                  <p>{{ 'menu.localization' | trans}}</p>
               </div>
            </div>

            {# Zone Acteurs #}
            <div class="element-box" id="actorElement">
               <fieldset>
                  <legend><span>{{ 'menu.actor' | trans}}</span></legend>
                  <div class="row align-items-end actorSearchZone">
                     <div class="form-group col-sm-4">
                        <label for=""> {{ 'clean.select_your_country' | trans }}</label>
                        <select id="selectCountry" name="selectCountry" class="form-control form-control-sm select-dashboard rounded">
                           <option value="">{{ 'menu.select' | trans }}</option>
                           {% for country in countries %}
                              {% if country.id == idSelectedCountry %}
                                 <option selected value="{{ country.id }}">{{ country.name }}</option>
                              {% else %}
                                 <option value="{{ country.id }}">{{ country.name }}</option>
                              {% endif %}
                           {% endfor %}
                        </select>
                     </div>

                     <div class="form-group col-sm-4">
                        <label for=""> {{ 'clean.enter_part_phone_number' | trans }}</label>
                        <input type="input" name="userPhone" id="userPhone" value="" class="form-control form-control-sm input-dashboard rounded">
                     </div>
                     <div class="form-group col-sm-4">
                        <button class="btn btn-sm btn-primary" id="findUser" onclick="findUser()">{{ 'clean.find_accounts_to_purge' | trans }}</button>
                     </div>
                     <p>* {{'clean.note_empty_number_then_search_for_orphan_users'  | trans }} </p>
                  </div>
                  <div class="purge row align-items-end"  style="position: relative">
                     <div class="kz_loader" id="kz_loader_actor">{{ 'clean.note_loading_table' | trans }}</div>
                     <div class="table-responsive">
                        <table id="kz_actor_table" class="table table-bordered dt-responsive nowrap" style="width:100%">
                           <thead>
                           <tr>
                              <th class="no-print selection">{{ 'clean.selection' | trans }}</th>
                              <th>{{ 'clean.id' | trans }}</th>
                              <th>{{ 'clean.number' | trans }}</th>
                              <th>{{ 'clean.type' | trans }}</th>
                           </tr>
                           </thead>
                           <tbody id="tbodyUser">

                           </tbody>
                        </table>
                     </div>
                  </div>
                  <div class="execute">
                     <button class="btn btn-sm btn-primary" id="selectAllUser" onclick="selectAllUser()">{{'menu.select_all' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="removeSelected" onclick="removeSelected()">{{'menu.delete' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="clearUserTable" onclick="clearUserTable()">{{ 'clean.clear_table' | trans }}</button>
                  </div>
               </fieldset>
            </div>

            {# Zone Offres emplois #}
            <div class="element-box" id="offerElement">
               <fieldset>
                  <legend><span>{{ 'menu.offer' | trans}}</span></legend>
                  <div class="row align-items-end">
                     <div class="form-group col-sm-8 execute">
                        <button class="btn btn-sm btn-primary" id="findOffers" onclick="findOffers()">{{ 'clean.offers_list' | trans }}</button>
                        <button class="btn btn-sm btn-primary" id="clearOfferTable" onclick="clearOfferTable()">{{ 'clean.clear_table' | trans }}</button>
                     </div>
                  </div>
                  <div class="purge row align-items-end"  style="position: relative">
                     <div class="kz_loader" id="kz_loader_offer">{{ 'clean.note_loading_table' | trans }}</div>
                     <div class="table-responsive">
                        <table id="kz_offer_table" class="table table-bordered dt-responsive nowrap" style="width:100%">
                           <thead>
                           <tr>
                              <th class="no-print selection">{{ 'clean.selection' | trans }}</th>
                              <th>{{ 'clean.id' | trans }}</th>
                              <th>{{ 'menu.country' | trans  }}</th>
                              <th>{{ 'clean.type' | trans }}</th>
                              <th>{{ 'menu.name' | trans  }}</th>
                              <th>{{ 'menu.title' | trans  }}</th>
                              <th>{{ 'menu.updated_date' | trans }}</th>
                              <th>{{ 'menu.expires_on' | trans }}</th>
                           </tr>
                           </thead>
                           <tbody id="tbodyOffer">

                           </tbody>
                        </table>
                     </div>
                  </div>
                  <div class="execute">
                     <button class="btn btn-sm btn-primary" id="selectAllOffer" onclick="selectAllOffer()">{{ 'menu.select_all' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="forceUpdateOffers" onclick="findOffers('closedDate')()">{{ 'clean.updating_expiry_dates' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="findObsoleteOffers" onclick="findOffers('findObsoleteOffers')()">{{ 'clean.search_for_obsolete_offers' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="removeSelectedOffers" onclick="removeSelectedOffers()">{{ 'menu.delete' | trans}}</button>
                  </div>
               </fieldset>
            </div>

            {# Zone Localisation calcul coordonn√©es #}
            <div class="element-box" id="localizationElement">
               <fieldset>
                  <legend><span>{{ 'menu.localization' | trans}}</span></legend>
                  <div class="row align-items-end">
                     <div class="form-group col-sm-12 execute">
                        <p class="mt-1 font-weight-bold">{{ 'clean.search_for_actors_without_location' | trans }}</p>
                        <button class="btn btn-sm btn-primary" id="findPersonDegreesWithoutCoordinate" onclick="findActorWithoutLocation('persondegree')">{{ 'clean.list_of_graduates' | trans }}</button>
                        <button class="btn btn-sm btn-primary" id="findSchoolsWithoutCoordinate" onclick="findActorWithoutLocation('school')">{{ 'clean.list_of establishments' | trans }}</button>
                        <button class="btn btn-sm btn-primary" id="findCompaniesWithoutCoordinate" onclick="findActorWithoutLocation('company')">{{ 'clean.list_of_companies' | trans }}</button>

                        <p class="mt-3 font-weight-bold">{{'clean.search_for_actors_with_identical_coordinates' | trans}}</p>
                        <button class="btn btn-sm btn-primary" id="findPersonDegreesWithoutCoordinate" onclick="findActorWithIdenticalLocation('persondegree')">{{ 'clean.list_of_graduates' |trans }}</button>
                        <button class="btn btn-sm btn-primary" id="findSchoolsWithoutCoordinate" onclick="findActorWithIdenticalLocation('school')">{{ 'clean.list_of establishments' | trans }}</button>
                        <button class="btn btn-sm btn-primary" id="findCompaniesWithoutCoordinate" onclick="findActorWithIdenticalLocation('company')">{{ 'clean.list_of_companies' | trans }}</button>
                     </div>
                  </div>
                  <div class="purge row align-items-end"  style="position: relative">
                     <div class="kz_loader" id="kz_loader_localization">{{ 'clean.note_loading_table' | trans }}</div>
                     <div class="table-responsive">
                        <table id="kz_localization_table" class="table table-bordered dt-responsive nowrap" style="width:100%">
                           <thead>
                           <tr>
                              <th class="no-print selection">Selection{{ '' | trans }}</th>
                              <th>{{ 'clean.id' | trans }}</th>
                              <th>{{ 'menu.country' | trans }}</th>
                              <th>{{ 'menu.city' | trans }}</th>
                              <th>{{ 'menu.actor' | trans }}</th>
                              <th>{{ 'clean.error' | trans }}</th>
                              <th>{{ 'menu.latitude' | trans }}</th>
                              <th>{{ 'menu.longitude' | trans }}</th>
                              <th>{{ 'menu.created_date' | trans }}</th>
                              <th>{{ 'menu.modified_on' | trans }}</th>
                           </tr>
                           </thead>
                           <tbody id="tbodyLocalization">

                           </tbody>
                        </table>
                     </div>
                  </div>
                  <div class="execute">
                     <button class="btn btn-sm btn-primary" id="selectAllLocalization" onclick="selectAlllocalization()">{{ 'menu.select_all' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="findLocalization" onclick="findSelectedActorsWithoutLocation()">{{ 'clean.search_for_coordinates' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="updateLocalization" onclick="updateSelectedActorsWithoutLocation()">{{ 'clean.update_coordinates' | trans }}</button>
                     <button class="btn btn-sm btn-primary" id="clearLocalizationTableWithoutCoordinate" onclick="clearLocalizationTable()">{{ 'clean.clear_table' | trans }}</button>
                  </div>
               </fieldset>
            </div>
         </div>
      </div>
      <select hidden id="countryNumber">
         {% for country in countries %}
            {% if country.id == idSelectedCountry %}
               <option selected value="{{ country.id }}">{{ country.phoneCode }}</option>
            {% else %}
               <option value="{{ country.id }}">{{ country.phoneCode }}</option>
            {% endif %}
         {% endfor %}
      </select>
      <select hidden id="countryDigit">
         {% for country in countries %}
            {% if country.id == idSelectedCountry %}
               <option selected value="{{ country.id }}">{{ country.phoneDigit }}</option>
            {% else %}
               <option value="{{ country.id }}">{{ country.phoneDigit }}</option>
            {% endif %}
         {% endfor %}
      </select>
   </div>
{% endblock %}

{% block js %}
   {# fix bugg on Firefox  #}
   <asp:ScriptReference Path="https://maps.googleapis.com/maps/api/js?key=AIzaSyDjcLgEOEkdQfwxEyGOu4hHlSY_s-LOGkQ&libraries=places" />

   {# connect API GoogleMaps #}
   <script async defer
           src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBy9WBkxvkGzs4tQN-RilyvV6WvWnTInUM&callback"
           type="text/javascript">
   </script>
   <script>
      let translations = [];
      getTranslation().then (function (translation) {
         translations = translation
         // console.log(translations);
      }) ;

      /* Menu selection */
      $('#actorElement').show();
      $('#offerElement').hide();
      $('#localizationElement').hide();
      function activateActorMenu() {
         $('#menuActor').removeClass('menuUp');
         $('#menuActor').addClass('menuDown');
         $('#menuOffer').removeClass('menuDown');
         $('#menuOffer').addClass('menuUp');
         $('#menuLocalization').removeClass('menuDown');
         $('#menuLocalization').addClass('menuUp');
         $('#actorElement').show();
         $('#offerElement').hide();
         $('#localizationElement').hide();
      }
      function activateOfferMenu() {
         $('#menuActor').removeClass('menuDown');
         $('#menuActor').addClass('menuUp');
         $('#menuOffer').removeClass('menuUp');
         $('#menuOffer').addClass('menuDown');
         $('#menuLocalization').removeClass('menuDown');
         $('#menuLocalization').addClass('menuUp');
         $('#actorElement').hide();
         $('#offerElement').show();
         $('#localizationElement').hide();
      }
      function activateLocalizationMenu() {
         $('#menuActor').removeClass('menuDown');
         $('#menuActor').addClass('menuUp');
         $('#menuOffer').removeClass('menuDown');
         $('#menuOffer').addClass('menuUp');
         $('#menuLocalization').removeClass('menuUp');
         $('#menuLocalization').addClass('menuDown');
         $('#actorElement').hide();
         $('#offerElement').hide();
         $('#localizationElement').show();
      }

      /* set $locationRef pourles appels Ajax */
      /* ------------------------------------ */
      let dirs = window.location.href.split('/');
      let $locationRef = "";
      for (let i = 0; i < dirs.length - 1; i++)
         $locationRef += dirs[i] + '/';

      function selectAllUser() {
         if($('.userCheck').first().is(':checked')) {
            $('.userCheck').prop('checked', false);
         } else {
            $('.userCheck').prop('checked', true);
         }
      }

      function selectAllOffer() {
         if($('.offerCheck').first().is(':checked')) {
            $('.offerCheck').prop('checked', false);
         } else {
            $('.offerCheck').prop('checked', true);
         }
      }

      function selectAlllocalization() {
         if($('.localizationCheck').first().is(':checked')) {
            $('.localizationCheck').prop('checked', false);
         } else {
            $('.localizationCheck').prop('checked', true);
         }
      }

      function clearUserTable() {
         $('#kz_actor_table').DataTable().clear();
         $('#kz_actor_table').DataTable().destroy();
      }

      function clearOfferTable() {
         $('#kz_offer_table').DataTable().clear();
         $('#kz_offer_table').DataTable().destroy();
      }

      function clearLocalizationTable() {
         $('#kz_localization_table').DataTable().clear();
         $('#kz_localization_table').DataTable().destroy();
      }

      function removeSelected() {
         let nbUsers = 0;
         let struser = "";
         $('.userCheck').each(function () {
            if($(this).is(':checked')) {
               if(nbUsers>0)
                  struser+=',';
               struser += $(this).attr('id');
               nbUsers++;
            }
         });
         if(nbUsers > 0)
            if(confirm(translations["js.want_delete_these_users_part1"] + " " + nbUsers + " " +  translations["js.want_delete_these_users_part2"])) {
               datas = new Object();
               datas['ids'] = struser;

               $.get($locationRef + 'removeActors/', datas).done(function (res) {
                  // console.log("nb erreurs " + res[1].length);
                  if(res[1].length>0) {
                     console.log("erreurs rencontr√©es " + res[1]);
                     alert(res[1]);
                  } else {
                     console.log("suppression des users : "+ res[0]);
                     res[0].forEach(function (id) {
                        //console.log("  --> " + id);
                        $('#'+ id).parents('tr').remove().draw;
                     })
                  }
               })
            }
      }

      function removeSelectedOffers() {
         let nbOffers = 0;
         let stroffer = "";
         $('.offerCheck').each(function () {
            if($(this).is(':checked')) {
               if(nbOffers>0)
                  stroffer+=',';
               stroffer += $(this).attr('id');
               nbOffers++;
            }
         });
         if(nbOffers > 0)
            if(confirm(translations["js.want_delete_these_offers_part1"] + " " + nbOffers + " " + translations["js.want_delete_these_offers_part2"])) {
               datas = new Object();
               datas['ids'] = stroffer;

               $.get($locationRef + 'removeOffers/', datas).done(function (res) {
                  console.log("nb erreurs " + res[1].length);
                  if(res[1].length>0) {
                     console.log("erreurs rencontr√©es " + res[1]);
                     alert(res[1]);
                  } else {
                     console.log("suppression des Offres : "+ res[0]);
                     res[0].forEach(function (id) {
                        //console.log("  --> " + id);
                        $('#'+ id).parents('tr').remove().draw;
                     })
                  }
               })
            }
      }

      function findUser() {
         /* appel ajax en get pour sauvegarder le Dipl√¥m√© */
         /* --------------------------------------------- */
         let datas = []
         datas = new Object();
         datas['userPhone'] = $("#userPhone").val();
         //alert(datas['userPhone']);
         $('#kz_loader_actor').css("display", "flex");

         $.get($locationRef + 'findActor/', datas).done(function (res) {

            $('#kz_actor_table').DataTable().clear();
            $('#kz_actor_table').DataTable().destroy();

            res.forEach(function (user) {
               // console.log(user.name);
               let html = '<tr class="userClean" role="row">';
               html += '    <td class="row-actions sorting_1">';
               // html += '    <div class="checkbox-inline" style="text-align:center;">';
               html += '       <input  type="checkbox" class="userCheck" id="' + user.id + '" >';
               // html += '    </div>';
               html += '    </td>';
               html += '    <td class="tdinput"><p id="p_id'+ user.id + '">'+ user.id+ '</p></td>';
               html += '    <td class="tdinput"><p id="p_name'+ user.id + '">'+ user.name+ '</p></td>';
               html += '    <td class="tdinput"><p id="p_type'+ user.id + '">'+ user.type+ '</p></td>';
               html += '</tr>';
               $('#tbodyUser').append(html);
               $('#kz_loader_actor').css("display", "none")
            })

            if(res.length == 0)
               $('#kz_loader_actor').css("display", "none")

            // $("#kz_actor_table").dataTable().draw;
            //$('#kz_actor_table').DataTable().clean;
            $('#kz_actor_table').dataTable({
               'columnDefs': [
                  {'max-width': '10%', 'selection': 0}
               ],
            });

            //console.log (res );

         }, "json");
      }

      function findOffers(action) {
         let datas = [];
         datas = new Object();
         datas['action'] = action;
         $('#kz_loader_offer').css("display", "flex");
         $.get($locationRef + 'findJobOffer/', datas).done(function (res) {

            $('#kz_offer_table').DataTable().clear();
            $('#kz_offer_table').DataTable().destroy();
            //
            // if(res[2].length > 0) {
            //    console.log(res[3]);
            // }

            if(res[0].length == 0) {
               $('#kz_loader_offer').css("display", "none")
            }

            res[0].forEach(function (offer) {
               // console.log(user.name);
               let html = '<tr class="userClean" role="row">';
               html += '    <td class="row-actions sorting_1">';
               // if(res[2].includes(offer.id))
               //    html += '       <input checked type="checkbox" class="offerCheck" id="' + offer.id + '" >';
               // else
                  html += '       <input type="checkbox" class="offerCheck" id="' + offer.id + '" >';

               html += '    </td>';
               html += '    <td class="tdinput"><p id="p_id' + offer.id + '">' + offer.id + '</p></td>';
               html += '    <td class="tdinput"><p id="p_country' + offer.id + '">' + offer.country + '</p></td>';
               html += '    <td class="tdinput"><p id="p_type' + offer.id + '">' + offer.type + '</p></td>';
               html += '    <td class="tdinput"><p id="p_name' + offer.id + '">' + offer.name + '</p></td>';
               html += '    <td class="tdinput"><p id="p_title' + offer.id + '">' + offer.title + '</p></td>';
               html += '    <td class="tdinput"><p id="p_update_date' + offer.id + '">' + offer.updateDate + '</p></td>';
               html += '    <td class="tdinput"><p id="p_ended_date' + offer.id + '">' + offer.closedDate + '</p></td>';
               html += '</tr>';
               $('#tbodyOffer').append(html);
               $('#kz_loader_offer').css("display", "none")
            })

            /* Mise √† jour des checks */
            $('.offerCheck').each(function () {
               if(res[2].includes(parseInt($(this).attr('id')))) {
                  $(this).prop('checked', true);
               }
            })

            if(res[0].length > 0) {
               //$("#kz_offer_table").dataTable().draw;
               $('#kz_offer_table').dataTable({
                  'columnDefs': [
                     {'max-width': '10%', 'selection': 0}
                  ],
               });
            }

            //console.log (res );

         }, "json");
      }

      function findActorWithoutLocation(actor) {
         let datas = [];
         datas = new Object();
         datas['actor'] = actor;
         $('#kz_loader_localization').css("display", "flex");
         $('#findLocalization').show();

         // console.log($locationRef + ",  " + actor);
         $.get($locationRef + 'getAllActorsWithoutCoordinate/', datas).done(function (res) {

            $('#kz_localization_table').DataTable().clear();
            $('#kz_localization_table').DataTable().destroy();
             // console.log(res[0][0].id);

            if(res[0].length == 0) {
               $('#kz_loader_localization').css("display", "none")
            }

            res[0].forEach(function (localization) {
               // console.log(user.name);
               let html = '<tr class="userClean" role="row">';
               html += '    <td class="row-actions sorting_1">';
               html += '       <input type="checkbox" class="localizationCheck" id="' + localization.id + '" >';
               html += '    </td>';
               html += '    <td class="tdinput"><p id="p_id' + localization.id + '">' + localization.id + '</p></td>';
               html += '    <td class="tdinput"><p id="p_country' + localization.id + '">' + localization.country + '</p></td>';
               html += '    <td class="tdinput"><p id="p_city' + localization.id + '">' + localization.city + '</p></td>';
               html += '    <td class="tdinput"><p id="p_actor' + localization.id + '">' + localization.actor + '</p></td>';
               html += '    <td class="tdinput"><p id="p_error' + localization.id + '">' + localization.error + '</p></td>';
               html += '    <td class="tdinput"><p id="p_latitude' + localization.id + '">' + localization.latitude + '</p></td>';
               html += '    <td class="tdinput"><p id="p_longitude' + localization.id + '">' + localization.longitude + '</p></td>';
               html += '    <td class="tdinput"><p id="p_created_date' + localization.id + '">' + localization.created_date + '</p></td>';
               html += '    <td class="tdinput"><p id="p_updated_date' + localization.id + '">' + localization.updated_date + '</p></td>';
               html += '</tr>';
               $('#tbodyLocalization').append(html);
               $('#kz_loader_localization').css("display", "none")
            })

            if(res[0].length > 0) {
               //$("#kz_localization_table").dataTable().draw;
               $('#kz_localization_table').dataTable({
                  'columnDefs': [
                     {'max-width': '10%', 'selection': 0}
                  ],
               });
            }

            //console.log (res );
         }, "json");
      }

      function findActorWithIdenticalLocation(actor) {
         let datas = [];
         datas = new Object();
         datas['actor'] = actor;
         $('#kz_loader_localization').css("display", "flex");
         $('#findLocalization').hide();

         if(actor=='persondegree') {
            alert(translations["js.warning_operation_may_take_several_minutes"]);
         }

         // console.log($locationRef + ",  " + actor);
         $.get($locationRef + 'getAllActorsWithDuplicateCoordinate/', datas).done(function (res) {

            $('#kz_localization_table').DataTable().clear();
            $('#kz_localization_table').DataTable().destroy();
            // console.log(res[0][0].id);

            if(res[0].length == 0) {
               $('#kz_loader_localization').css("display", "none")
            }

            res[0].forEach(function (localization) {
               // console.log(user.name);
               let html = '<tr class="userClean" role="row">';
               html += '    <td class="row-actions sorting_1">';
               html += '       <input type="checkbox" class="localizationCheck" id="' + localization.id + '" >';
               html += '    </td>';
               html += '    <td class="tdinput"><p id="p_id' + localization.id + '">' + localization.id + '</p></td>';
               html += '    <td class="tdinput"><p id="p_country' + localization.id + '">' + localization.country + '</p></td>';
               html += '    <td class="tdinput"><p id="p_city' + localization.id + '">' + localization.city + '</p></td>';
               html += '    <td class="tdinput"><p id="p_actor' + localization.id + '">' + localization.actor + '</p></td>';
               html += '    <td class="tdinput"><p id="p_error' + localization.id + '">' + localization.error + '</p></td>';
               html += '    <td class="tdinput"><p id="p_latitude' + localization.id + '">' + localization.latitude + '</p></td>';
               html += '    <td class="tdinput"><p id="p_longitude' + localization.id + '">' + localization.longitude + '</p></td>';
               html += '    <td class="tdinput"><p id="p_created_date' + localization.id + '">' + localization.created_date + '</p></td>';
               html += '    <td class="tdinput"><p id="p_updated_date' + localization.id + '">' + localization.updated_date + '</p></td>';
               html += '</tr>';
               $('#tbodyLocalization').append(html);
               $('#kz_loader_localization').css("display", "none")
            })

            if(res[0].length > 0) {
               //$("#kz_localization_table").dataTable().draw;
               $('#kz_localization_table').dataTable({
                  'columnDefs': [
                     {'max-width': '10%', 'selection': 0}
                  ],
               });
            }

            //console.log (res );
         }, "json");
      }

      function findSelectedActorsWithoutLocation() {
         $('.localizationCheck').each(function () {
            if ($(this).is(':checked')) {
               //calcule les coodonn√©es avec API Google Maps
               let address = $('#p_city' + $(this).attr('id')).text() + ',' + '' +
                   $('#p_country' + $(this).attr('id')).text();
               let latInputID = '#p_latitude' + $(this).attr('id');
               let lngInputID = '#p_longitude' + $(this).attr('id');

               getGeocodeAddressLocation(address, latInputID, lngInputID);
            }
         });
      }

      function updateSelectedActorsWithoutLocation() {
         let nbActors = 0;
         let nbCoo = 0;
         let stractor = "";
         let strcoo = "";
         let actorType = null;

         // deselectionne les checkBox sans coordonn√©es
         $('.localizationCheck').each(function () {
            let latInputID = '#p_latitude' + $(this).attr('id');
            let lngInputID = '#p_longitude' + $(this).attr('id');

            if($(this).is(':checked')) {
               if (($(latInputID).text() == "undefined") || ($(lngInputID).text() == "undefined")) {
                  $(this).prop("checked", false);
               }
            }
         });

         $('.localizationCheck').each(function () {
            if($(this).is(':checked')) {

               //r√©cup√®re les coodonn√©es calcul√©es avec API Google Maps
               if(nbCoo>0)
                  strcoo+=';';
               let address = $('#p_city' + $(this).attr('id')).text() + ',' + '' +
                   $('#p_country' + $(this).attr('id')).text();
               let latInputID = '#p_latitude' + $(this).attr('id');
               let lngInputID = '#p_longitude' + $(this).attr('id');

               if(($(latInputID).text() != "undefined") && ($(lngInputID).text() != "undefined")) {
                  strcoo += $(latInputID).text() + ',' + $(lngInputID).text();
                  nbCoo++;

                  // selectionne les acteurs s√©lectionn√©s
                  if (nbActors > 0)
                     stractor += ',';
                  stractor += $(this).attr('id');
                  nbActors++;

                  // type d'utilisateur √† mettre √† jour
                  if (nbActors == 1) {
                     actorType = $('#p_actor' + $(this).attr('id')).text();
                  }
               }
            }
         });

         if(nbActors > 0)
            if(confirm(translations["js.would_you_like_to_update_the_coordinates_of_these"] + " " + nbActors + " " + translations["js.actors"] + " ?")) {
               datas = new Object();
               datas['ids'] = stractor;
               datas['actorType'] = actorType;
               datas['coos'] = strcoo;
               // datas[] = ['ids'=>stractor];
               $('#kz_loader_localization').css("display", "flex");

               $.get($locationRef + 'updateLocalizationActors/', datas).done(function (res) {
                  console.log("nb erreurs " + res[1].length);
                  $('#kz_loader_localization').css("display", "none");
                  if(res[1].length>0) {
                     console.log("erreurs rencontr√©es " + res[1]);
                     alert(res[1]);
                  } else {
                     console.log("Mise √† jour des coordonn√©es : "+ res[0]);
                     res[0].forEach(function (id) {
                        // console.log("  --> " + id);
                        $('#'+ id).parents('tr').remove().draw;
                     })
                  }
               })
            }
      }

      $('#selectCountry').change(function () {
         let countryId = $(this).val();
         let countryNumber = '';

         $('#countryNumber option').each(function () {
            if( $(this).val() == countryId) {
               countryNumber = $(this).text();
               // console.log(countryNumber + " " + countryNumber.length)
            }
         })

         $('#countryDigit option').each(function () {
            if( $(this).val() == countryId) {
               let sizeOfPhone = ('+' +  countryNumber).length + parseInt($(this).text());
               // console.log('sizeOfPhone = ' + sizeOfPhone);

               /* contraint le nombre de num√©ros par rapport au nombre de digits du pays */
               $('#userPhone').attr('size',sizeOfPhone);
               $('#userPhone').attr('maxlength',sizeOfPhone);
               $('#userPhone').val('+' + countryNumber);
            }
         })
      })

      /* force la saisie en num√©rique */
      $(function(){
         $("#userPhone").keypress(function (e) {
            if (e!=undefined && e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
               $("#errmsg").html("Number Only").stop().show().fadeOut("slow");
               return false;
            }
         });
      });
   </script>
   <script>
      async function getGeocodeAddressLocation(address, latInputID, lngInputID) {
         // setTimeout(function () {
         // }, 5000);

         let geocoder = new google.maps.Geocoder();
         let erreur = true;
         await geocoder.geocode({'address': address}, function (results, status) {
            // console.log("Result: " + results + ", Status: " + status)
            if (status == 'OK') {
               let lat = results[0].geometry.location.lat().toPrecision(7);
               let lng = results[0].geometry.location.lng().toPrecision(7);
               $(latInputID).text(lat.toString());
               $(lngInputID).text(lng.toString());
               //console.log(address + " coo->" + lat + "," + lng);
               erreur = false;
               return true;
            } else {
               console.log("Echec de recherche Latitude/Longitude : " + address);
               return false;
            }
         });
      }
   </script>
{% endblock %}
