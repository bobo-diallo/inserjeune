{% extends 'school/content.html.twig' %}
{% block referencement_h1 %}
    {{ parent() }} {{ 'referencement.school_enrollment' | trans }}
{% endblock%}

{% block body %}
    <div class="content-i">
        <div class="content-box">
            {% set rowNumber = 0 %}
            {% set lien_images = asset('build/images/icon/')  %}
            <div class="element-wrapper">
                {%  if app.user.roles|role =="Administrateur" %}
                    <img src="{{ asset('build/images/icon/degree.png') }}" alt="locality" class="title-icon" style="margin-bottom: -35px;">
                {% endif %}
                <h6 class="element-header">{{ 'school.enrolment_of_graduates' | trans }}</h6>
                <input id="lienImages" value="{{ lien_images }}" hidden="hidden">
                <div class="element-box">
                    {#<script>alert("role =" + {{ app.user.roles|role }})</script>#}
                    {%  if app.user.roles|role =="Etablissement" %}
                        <div class="controls-above-table">
                            <div class="row">
                                <div class="col-sm-12">
                                    <button class="btn btn-sm btn-primary" id="addPersonDegree" onclick="addRowPersonDegree('{{ lien_images }}')">{{"graduate.add_a_graduate" | trans }}</button>
                                    <a class="btn btn-sm btn-primary" href="#" id="importCSV_excel">Import Excel CSV</a>
                                    <a class="btn btn-sm btn-primary" href="{{ path('front_school_enroll_generate_template') }}"><i class="fa fa-download" aria-hidden="true"></i> Template Excel CSV</a>
                                    <input type="file" accept=".csv, .xls, .xlsx" hidden="hidden" id="inputImportCSV_excel"/>
                                    <input type="file" accept=".csv" hidden="hidden"  id="inputImportCSV_utf8"/>
                                    <img src="{{ asset('build/images/loading.gif') }}" alt="loading" id="idLoading" hidden="hidden">
                                </div>
                            </div>
                        </div>
                    {% endif %}
                    <div class="table-responsive">
                        <table id="kz_table" class="table table-striped table-bordered dt-responsive nowrap" style="width:100%">
                            <thead>
                            <tr>
                                <th>Actions</th>
                                <th>{{ 'menu.registration' | trans }}</th>
                                <th>{{ 'menu.firstname' | trans }}</th>
                                <th>{{ 'menu.name' | trans }}</th>
                                <th>{{ 'menu.date_of_birth_with_tag' | trans({'%tag_br%': '<br/>'}) | raw }}</th>
                                <th> {{ 'menu.gender' | trans }} </th>
                                <th> {{ 'menu.region' | trans }} </th>
                                <th>{{ 'menu.city' | trans }}</th>
                                <th>{{ 'menu.cell_phone' | trans }}</th>
                                <th>{{ 'menu.parent_cell_phone' | trans }}</th>
                                <th>{{ 'menu.email' | trans }}</th>
                                <th>{{ 'menu.degree' | trans }}</th>
                                <th>{{ 'menu.sector' | trans }}</th>
                                <th>{{ 'menu.branch' | trans }}</th>
                                <th>{{ 'menu.password' | trans }}</th>
                            </tr>
                            </thead>
                            <tbody id="tbodyPersonDegree">
                            {% for personDegree in personDegrees %}
                                {% set rowNumber = rowNumber + 1%}
                                {{ app.session.set('rowNumber', rowNumber) }}
                                {{ add_row_person_degree(rowNumber, personDegree, asset('build/images/icon/')) }}
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="menu-low-enroll">
                    <button class="btn btn-sm btn-primary" id="editAll" onclick="editAll()">{{ 'menu.edit_all' | trans }}</button>
                    <button class="btn btn-sm btn-primary" id="save" onclick="saveEdit('')">{{ 'menu.save_edit' | trans }}</button>
                    <button class="btn btn-sm btn-primary" id="selectAll" onclick="selectAll()">{{ 'menu.select_all' | trans }}</button>
                    <button class="btn btn-sm btn-primary" id="save" onclick="removeSelect('')">{{ 'menu.delete_selected' | trans }}</button>
                    <button class="btn btn-sm btn-primary" id="save" onclick="sendEmailSelect('')">{{ 'menu.select_send_email' | trans }}</button>
                </div>
            </div>
            <input style="display: none" id="rowNumber" value="{{ rowNumber }}">
            <input style="display: none" id="selectedCountry" value="{{ app.user.country.id }}">
            {% if(app.user.region) %}
                <input style="display: none" id="selectedRegion" value="{{ app.user.region.id }}">
            {% endif %}
            <input style="display: none" id="userRole" value="{{ app.user.roles|role }}">
            <select style="display: none"  id="regions">
                {% for region in regions  %}
                    <option value="{{ region.id }}">{{ region.name }}</option>
                {% endfor %}
            </select>
            <select style="display: none"  id="degrees">
                {% for degree in app.user.school.degrees  %}
                    <option value="{{ degree.id }}">{{ degree.name }}</option>
                {% endfor %}
            </select>

            </select>
            <select style="display: none"  id="sectorAreas">
                {% if app.user.school.sectorArea1  %} <option value="{{ app.user.school.sectorArea1.id }}">{{ app.user.school.sectorArea1.name }}</option>{% endif %}
                {% if app.user.school.sectorArea2  %} <option value="{{ app.user.school.sectorArea2.id }}">{{ app.user.school.sectorArea2.name }}</option>{% endif %}
                {% if app.user.school.sectorArea3  %} <option value="{{ app.user.school.sectorArea3.id }}">{{ app.user.school.sectorArea3.name }}</option>{% endif %}
                {% if app.user.school.sectorArea4  %} <option value="{{ app.user.school.sectorArea4.id }}">{{ app.user.school.sectorArea4.name }}</option>{% endif %}
                {% if app.user.school.sectorArea5  %} <option value="{{ app.user.school.sectorArea5.id }}">{{ app.user.school.sectorArea5.name }}</option>{% endif %}
                {% if app.user.school.sectorArea6  %} <option value="{{ app.user.school.sectorArea6.id }}">{{ app.user.school.sectorArea6.name }}</option>{% endif %}
            </select>
            <select style="display: none" id="cities">
            </select>
        </div>
    </div>
{% endblock %}

{% block js %}
    <script>
        function initDatepicker(startDate) {
            $('.datepicker-birthDate').datepicker({
                language: 'fr',
                startDate: new Date(startDate.getFullYear() - 100, startDate.getMonth(), startDate.getDate()), // 100 ans en arri√®re
                endDate: startDate,
            });
        }

        let translations = [];
        getTranslation().then (function (translation) {
            translations = translation;
        });

        let saveMulti=false;
        function checkAllShowMode() {
            let allShow = true;
            $('.enrolCheck').each(function () {
                if($(this).css("display") == "none")
                    allShow = false;
            })
            return allShow;
        }

        function selectAll() {
            if(checkAllShowMode() == true) {
                if($("#remove1").prop( "checked") == true) {
                    $('.enrolCheck').each(function () {
                        $(this).prop("checked", false);
                    })
                } else {
                    $('.enrolCheck').each(function () {
                        $(this).prop("checked", true);
                    })
                }
            } else {
                alert(translations["js.you_cannot_select_everything_if_line_edit_mode"])
            }
        }

        function editAll() {
            let rowNumber = $('#rowNumber').val();
            if($("#save1").css("display") == "none") {
                for (let i = 1; i <= rowNumber; i++) {
                    let row = $("#edit" + i ).attr('id').replace("edit","#personDegree");

                    $("#save" + i).css("display", "inline-block");
                    $("#cancel" + i).css("display", "inline-block");
                    $("#edit" + i).css("display", "none");
                    $("#remove" + i).css("display", "none");
                    $("#remove" + i).prop( "checked", false );

                    $(row).each(function() {
                        $(this).find('input').each(function () {
                            if(!$(this).hasClass("enrolCheck"))
                                $(this).css("display", "inline-block");
                        });
                        $(this).find('select').each(function () {
                            $(this).css("display", "inline-block");
                        });
                        $(this).find('p').each(function () {
                            $(this).css("display", "none");
                        });
                    })
                }
            } else {
                for (let i = 1; i <= rowNumber; i++) {
                    let row = $("#edit" + i ).attr('id').replace("edit","#personDegree");

                    $("#save" + i).css("display", "none");
                    $("#cancel" + i).css("display", "none");
                    $("#edit" + i).css("display", "inline-block");
                    $("#remove" + i).css("display", "inline-block");

                    $(row).each(function() {
                        $(this).find('input').each(function () {
                            if(!$(this).hasClass("enrolCheck"))
                                $(this).css("display", "none");
                        });
                        $(this).find('select').each(function () {
                            $(this).css("display", "none");
                        });
                        $(this).find('p').each(function () {
                            $(this).css("display", "inline-block");
                        });
                    })
                }
            }
        }
        function saveEdit() {
            saveMulti=true;
            let rowNumber = $('#rowNumber').val();
            let edits = [];

            for (let i = 1; i <= rowNumber; i++) {
                let saveId = $('#save' + i);
                if (saveId.css('display') != 'none' && saveId.attr('id') != null) {
                    edits.push(saveId.attr('id').replace('save', ''));
                }
            }

            if (edits.length > 0) {
                let errorNumber = 0;
                if (confirm(translations["js.sure_edit_these_entries_part1"] + " " + edits.length + " " + translations["js.sure_edit_these_entries_part2"])) {
                    for (let i = 0; i < edits.length; i++) {
                        if ($('#save' + edits[i]).css('display') != 'none') {
                            errorNumber += displayButton('save', edits[i], 'all');
                        }
                    }
                    if (errorNumber > 0) {
                        alert(translations['js.Please_complete_all_required_fields']);
                    }
                }
            } else {
                alert(translations["js.no_entry_to_validate"]);
            }
            saveMulti=false;
        }

        function removeSelect() {
            if(checkAllShowMode() == true) {
                let removes=[];
                $('.enrolCheck').each(function () {
                    if ($(this).prop("checked") == true)
                        removes.push($(this).parent().find("span").first().attr("id").replaceAll("id", ""));
                })
                if(removes.length > 0) {
                    let msg = "Etes vous s√ªr de supprimer cette entr√©e ?";
                    if(removes.length > 1)
                        msg = "Etes vous s√ªr de supprimer ces " + removes.length + " entr√©es ?";

                    if (confirm(msg)) {
                        for (let i=0; i<removes.length; i++ ) {
                            // alert("remove " + removes[i]);
                            displayButton('remove', removes[i], 'all');
                        }
                    }
                }
            } else {
                alert(translations["js.you_cannot_delete_entries_if_line_in_edit_mode"])
            }
        }

        function sendEmailSelect() {
            if (checkAllShowMode() == true) {
                let err = [];
                let mailsTo = [];
                $('.enrolCheck').each(function () {
                    if ($(this).prop("checked") == true) {
                        let userId = $(this).parent().find("span").first();
                        let userEmail = '#' + userId.attr("id").replaceAll("id", "p_email");
                        let userPwd = '#' + userId.attr("id").replaceAll("id", "p_password");
                        let userFirstName = '#' + userId.attr("id").replaceAll("id", "p_firstname");
                        let userName = '#' + userId.attr("id").replaceAll("id", "p_lastname");


                        if ($(userEmail).text() && $(userPwd).text()) {
                            mailsTo.push($('#' + userId.attr('id')).text());

                        } else if (!$(userEmail).text()) {
                            err.push("Pas d\'email " + $(userFirstName).text() + " " + $(userName).text())

                        } else {
                            err.push("Pas de Pwd " + $(userFirstName).text() + " " + $(userName).text())
                        }
                    }
                })
                if (err.length == 0) {
                    if (mailsTo.length > 0) {
                        if (confirm(translations["js.sure_send_notifications"])) {
                            $('#idLoading').removeAttr('hidden');
                            $.post(getBaseUrl() + 'sendNotificationEnrollmentDegree', {'persondegree_ids': mailsTo})
                                .done(function (data) {
                                    console.log({'persondegree_ids': mailsTo})
                                    $('#idLoading').attr('hidden', 'hidden');
                                    alert(translations['js.emails_sent_successfully']);
                                    $('#tbodyPersonDegree input').prop('checked', false);
                                })
                                .fail(function () {
                                    $('#idLoading').attr('hidden', 'hidden');
                                    alert(translations['js.error_while_sending_emails']);
                                })
                        }
                    }
                } else {
                    alert(err);
                }
            } else {
                alert(translations["js.you_cannot_send_an_email_if_line_in_edit_mode"])
            }
        }

        function addRowPersonDegree(assetLocationIcon) {
            let rowNumber = $('#rowNumber').val();
            rowNumber++;
            $('#rowNumber').val(rowNumber);
            let colorBack = "odd";

            let html = `
            <tr class="enrollpersondegree ${colorBack}" id="personDegree${rowNumber}" role="row">
                <td class="row-actions sorting_1">
                    <span style="display: none" id="id${rowNumber}"></span>
                    <button id="edit${rowNumber}" onclick="displayButton('edit', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}edit_16.png">
                    </button>
                    <input style="display: none" type="checkbox" class="enrolCheck" id="remove${rowNumber}">
                    <button style="display: none" class="savePersonDegree" id="save${rowNumber}" onclick="displayButton('save', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}save_16.png">
                    </button>
                    <button style="display: none" id="cancel${rowNumber}" onclick="displayButton('cancel', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}cancel_16.png">
                    </button>
                </td>
                <td class="tdinput">
                    <input id="registrationStudentSchool${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_registration"]}">
                    <p id="p_registrationStudentSchool${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input required id="firstname${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_first_name"]}">
                    <p id="p_firstname${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input required id="lastname${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_name"]}">
                    <p id="p_lastname${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input class="datepicker-birthDate" required id="birthDate${rowNumber}" style="display:none" value="" placeholder="dd/mm/yyyy">
                    <p id="p_birthDate${rowNumber}"></p>
                </td>
                <td class="tdselect">
                    <p id="p_selectSex${rowNumber}"></p>
                    <select required class="sex" style="display:none" id="selectSex${rowNumber}">
                        <option value="">${translations["js.select"]}</option>
                        <option value="un homme">${translations["js.a_man"]}</option>
                        <option value="une femme">${translations["js.a_woman"]}</option>
                    </select>
                </td>
                <td class="tdselect">
                    <p id="p_selectRegion${rowNumber}"></p>
                    <select required class="region" style="display:none" id="selectRegion${rowNumber}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectAddressCity${rowNumber}"></p>
                    <select required class="city" style="display:none" id="selectAddressCity${rowNumber}" placeholder="${translations["js.import_csv_region"]}">
                        <option>${translations["js.select"]}</option>
                    </select>
                </td>
                <td class="tdinput">
                    <input type="text" required id="phoneMobile1${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_mobile_phone"]}">
                    <p id="p_phoneMobile1${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input type="text" id="phoneMobile2${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_parent_mobile_phone"]}">
                    <p id="p_phoneMobile2${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input id="email${rowNumber}" style="display:none" value="" placeholder="${translations["js.import_csv_email"]}">
                    <p id="p_email${rowNumber}"></p>
                </td>
                <td class="tdselect">
                    <p id="p_selectDegree${rowNumber}"></p>
                    <select style="display:none" required id="selectDegree${rowNumber}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectSectorArea${rowNumber}"></p>
                    <select style="display:none" required id="selectSectorArea${rowNumber}" placeholder="${translations["js.import_csv_sector"]}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectActivity${rowNumber}"></p>
                    <select style="display:none" required id="selectActivity${rowNumber}" placeholder="${translations["js.import_csv_subsector"]}"></select>
                </td>
                <td class="tdinput">
                    <p id="p_password${rowNumber}"></p>
                </td>
            </tr>`;

            $('#tbodyPersonDegree').append(html);
            let idtest = "#edit"+ rowNumber;
            $( idtest ).addClass( "editPersonDegree" );
            addOptionRegion(rowNumber);

            // Recherches de ville en fonction de la region
            $('#selectRegion' + rowNumber).on('change', function() {
                $regionId = $('#selectRegion' + rowNumber + " option:selected" ).val();
                if($regionId) {
                    addOptionCity($regionId, rowNumber);
                    $("#selectAddressCity"+rowNumber).find('option').remove();
                }
            });

            // Recherches des fili√®res en fonction des secteurs
            $('#selectSectorArea' + rowNumber).on('change', function() {
                $sectorAreaId = $('#selectSectorArea' + rowNumber + " option:selected" ).val();
                if($sectorAreaId) {
                    addOptionActivity($sectorAreaId, rowNumber);
                    $("#selectActivity"+rowNumber).find('option').remove();
                }
            });

            // Add des options des dipl√¥mes de l'√©tablissement
            if($('#selectDegree' + rowNumber + " option").length == 0)
                addOptionDegree(rowNumber);

            // Add des options des SectorAreas de l'√©tablissement
            if($('#selectSectorArea' + rowNumber + " option").length == 0)
                addOptionSectorArea(rowNumber);

            // Add option de s√©lection de la r√©gion de l'√©tablissement
            if($('#selectAddressCity' + rowNumber + " option").length == 0)
            $("#selectAddressCity"+rowNumber).append("<option value=\"\">" + translations["js.select_region"] + "</option>");

            // Add option de s√©lection du SectorAreas de l'√©tablissement
            if($('#selectActivity' + rowNumber + " option").length == 0)
                $("#selectActivity"+rowNumber).append("<option value=\"\">" + translations["js.select_sector"] + "</option>");


            var today = new Date();
            today.setFullYear(today.getFullYear() - 12);
            //
            initDatepicker(today);

            //Lancement du mode √©dition
            $("#edit" + rowNumber).click();
        }

        function addRowPersonDegreeWithValue(values, callback) {
            let rowNumber = $('#rowNumber').val();
            let assetLocationIcon = $('#lienImages').val();

            rowNumber++;
            $('#rowNumber').val(rowNumber);
            let colorBack = "odd";

            let html = `
            <tr class="enrollpersondegree ${colorBack}" id="personDegree${rowNumber}" role="row">
                <td class="row-actions sorting_1">
                    <span style="display: none" id="id${rowNumber}"></span>
                    <button id="edit${rowNumber}" onclick="displayButton('edit', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}edit_16.png">
                    </button>
                    <input style="display: none" type="checkbox" class="enrolCheck" id="remove${rowNumber}">
                    <button style="display: none" class="savePersonDegree" id="save${rowNumber}" onclick="displayButton('save', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}save_16.png">
                    </button>
                    <button style="display: none" id="cancel${rowNumber}" onclick="displayButton('cancel', ${rowNumber}, 'one')">
                        <img src="${assetLocationIcon}cancel_16.png">
                    </button>
                </td>
                <td class="tdinput">
                    <input id="registrationStudentSchool${rowNumber}" style="display:none" value="${values[0]}" placeholder="${translations["js.import_csv_registration"]}">
                    <p id="p_registrationStudentSchool${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input required id="firstname${rowNumber}" style="display:none" value="${values[1]}" placeholder="${translations["js.import_csv_first_name"]}">
                    <p id="p_firstname${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input required id="lastname${rowNumber}" style="display:none" value="${values[2]}" placeholder="${translations["js.import_csv_name"]}">
                    <p id="p_lastname${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input class="datepicker-birthDate" required id="birthDate${rowNumber}" style="display:none" value="${values[3]}" placeholder="dd/mm/yyyy">
                    <p id="p_birthDate${rowNumber}"></p>
                </td>
                <td class="tdselect">
                    <p id="p_selectSex${rowNumber}"></p>
                    <select required class="sex" style="display:none" id="selectSex${rowNumber}">
                        <option value="">${translations["js.select"]}</option>
                        <option value="un homme">${translations["js.a_man"]}</option>
                        <option value="une femme">${translations["js.a_woman"]}</option>
                    </select>
                </td>
                <td class="tdselect">
                    <p id="p_selectRegion${rowNumber}"></p>
                    <select required class="region" style="display:none" id="selectRegion${rowNumber}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectAddressCity${rowNumber}"></p>
                    <select required class="city" style="display:none" id="selectAddressCity${rowNumber}">
                        <option>${translations["js.select"]}</option>
                    </select>
                </td>
                <td class="tdinput">
                    <input type="text" required id="phoneMobile1${rowNumber}" style="display:none" value="${values[7]}" placeholder="${translations["js.import_csv_mobile_phone"]}">
                    <p id="p_phoneMobile1${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input type="text" id="phoneMobile2${rowNumber}" style="display:none" value="${values[8]}" placeholder="${translations["js.import_csv_parent_mobile_phone"]}">
                    <p id="p_phoneMobile2${rowNumber}"></p>
                </td>
                <td class="tdinput">
                    <input id="email${rowNumber}" style="display:none" value="${values[9]}" placeholder="${translations["js.import_csv_email"]}">
                    <p id="p_email${rowNumber}"></p>
                </td>
                <td class="tdselect">
                    <p id="p_selectDegree${rowNumber}"></p>
                    <select style="display:none" required id="selectDegree${rowNumber}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectSectorArea${rowNumber}"></p>
                    <select style="display:none" required id="selectSectorArea${rowNumber}" placeholder="${translations["js.select_sector"]}"></select>
                </td>
                <td class="tdselect">
                    <p id="p_selectActivity${rowNumber}"></p>
                    <select style="display:none" required id="selectActivity${rowNumber}" placeholder="${translations["js.select_activity"]}"></select>
                </td>
                <td class="tdinput">
                    <p id="p_password${rowNumber}"></p>
                </td>
            </tr>
        `;
            $('#tbodyPersonDegree').append(html);
            let idtest = "#edit"+ rowNumber;
            $( idtest ).addClass( "editPersonDegree" );
            addOptionRegion(rowNumber);
            addOptionSectorArea(rowNumber);
            addOptionDegree(rowNumber);

            // Recherches de ville en fonction de la region
            $('#selectRegion' + rowNumber).on('change', function () {
                let $regionId = $('#selectRegion' + rowNumber + " option:selected").val();
                if ($regionId) {
                    addOptionCity($regionId, rowNumber, values[6]);
                }
            });

            // Recherches des fili√®res en fonction des secteurs
            $('#selectSectorArea' + rowNumber).on('change', function() {
                let $sectorAreaId = $('#selectSectorArea' + rowNumber + " option:selected" ).val();
                if($sectorAreaId) {
                    addOptionActivity($sectorAreaId, rowNumber, values[12]);
                }
            });

            let errors = [];
            changeSelectOptionByValue('#selectRegion' + rowNumber, values[5], (isValid) => {
                if (!isValid) {
                    errors.push(`La r√©gion de la ligne ${rowNumber} n'existe pas dans le system.`);
                }
            });
            changeSelectOptionByValue('#selectDegree' + rowNumber, values[10], (isValid) => {
                if (!isValid) {
                    errors.push(`Le dipl√¥me de la ligne ${rowNumber} n'existe pas dans le system.`);
                }
            });
            changeSelectOptionByValue('#selectSectorArea' + rowNumber, values[11], (isValid) => {
                if (!isValid) {
                    errors.push(`Le secteur de la ligne ${rowNumber} n'existe pas dans le system.`);
                }
            });
            changeSelectOptionByValue('#selectSex' + rowNumber, values[4], (isValid) => {
                if (!isValid) {
                    errors.push(`Le sexe de la ligne ${rowNumber} n'existe pas dans le system.`);
                }
            });

            if (errors.length > 0) {
                callback(errors);
            }

            // Lancement du mode √©dition
            $("#edit" + rowNumber).click();

            var today = new Date();
            today.setFullYear(today.getFullYear() - 12);
            initDatepicker(today);
        }

        function changeSelectOptionByValue(selectId, textValue, callback) {
            const $select = document.querySelector(selectId);
            const $options = Array.from($select.options);
            const optionToSelect = $options.find(item => item.text.toLowerCase() === textValue.toLowerCase());

            if (optionToSelect) {
                optionToSelect.selected = true;
                $(selectId).trigger('change');
            } else {
                if (callback !== undefined) {
                    callback(false);
                }
            }
        }


        function displayButton(action, rowNumber, type) {
            let save = "#save" + rowNumber;
            let cancel = "#cancel" + rowNumber;
            let edit = "#edit" + rowNumber;
            let remove = "#remove" + rowNumber;

            /* r√©cup√©ration de l'id du dipl√¥m√© si existant */
            let personDegreeId = $("#id" + rowNumber).text();

            /* test si tout les champs sont remplis */
            /* ------------------------------------ */
            let check = true;
            let errorNumber = 0;

            if(action=="save") {
                $(row).each(function () {
                    $(this).find('input').each(function () {
                        if($(this).prop("required") == true) {
                            if ($(this).val() == '') {
                                check = false;
                                $(this).css({"background-color": "#ffd5d5"});
                                errorNumber++;
                            } else {
                                $(this).css({"background-color": "white"});
                            }
                        }
                    })
                    $(this).find('select').each(function () {
                        if($(this).prop("required") == true) {

                            if (($(this).val() == "") ||  (($(this).val())&&($(this).val().toLowerCase() == translations["js.select"]))) {
                                check = false;
                                $(this).css({"background-color": "#ffd5d5"});
                                errorNumber++;
                            } else {
                                $(this).css({"background-color": "white"});
                            }
                        }
                    })
                });
            }
            /* Affichage des buttons */
            /* --------------------- */
            if(action=="edit") {
                $(save).css("display", "inline-block");
                $(cancel).css("display", "inline-block");
                $(edit).css("display", "none");
                $(remove).css("display", "none");
                $(remove).prop( "checked", false );

            } else if((action=="save")&&(check==true)) {
                $(save).css("display", "none");
                $(cancel).css("display", "none");
                $(edit).css("display", "inline-block");
                $(remove).css("display", "inline-block");

            } else if(action=="cancel") {
                $(save).css("display", "none");
                $(cancel).css("display", "none");
                $(edit).css("display", "inline-block");
                $(remove).css("display", "inline-block");
            }

            /* Affichage des inputs, select et des p */
            /* ------------------------------------- */
            row = $( edit ).attr('id').replace("edit","#personDegree");
            $(row).each(function() {
                if (action == "edit") {
                    $(this).find('input').each(function () {
                        if(!$(this).hasClass("enrolCheck"))
                            $(this).css("display", "inline-block");
                    });
                    $(this).find('select').each(function () {
                        $(this).css("display", "inline-block");
                    });
                    $(this).find('p').each(function () {
                        $(this).css("display", "none");
                    });

                } else if ((action == "save") && (check == true)) {
                    $(this).find('input').each(function () {
                        if(!$(this).hasClass("enrolCheck"))
                            $(this).css("display", "none");
                    });
                    $(this).find('select').each(function () {
                        $(this).css("display", "none");
                    });
                    $(this).find('p').each(function () {
                        $(this).css("display", "inline-block");
                    });

                } else if (action == "cancel") {
                    $(this).find('input').each(function () {
                        if(!$(this).hasClass("enrolCheck"))
                            $(this).css("display", "none");
                    });
                    $(this).find('select').each(function () {
                        $(this).css("display", "none");
                    });
                    $(this).find('p').each(function () {
                        $(this).css("display", "inline-block");
                    });
                }
            });

            /* Appels Ajax pour la sauvegarde et la suppression  */
            /* ------------------------------------------------- */
            if(action=="save") {
                /* test si tout les champs sont remplis */
                /* ------------------------------------ */
                let check = true;
                if(action=="save") {
                    $(row).each(function () {
                        $(this).find('input').each(function () {
                            if($(this).prop("required") == true) {
                                if ($(this).val() == '') {
                                    check = false;
                                    $(this).css({"background-color": "#ffd5d5"});
                                } else {
                                    $(this).css({"background-color": "white"});
                                }
                            }
                        })
                        $(this).find('select').each(function () {
                            if($(this).prop("required") == true) {

                                if (($(this).val() == "") ||  (($(this).val())&&($(this).val().toLowerCase() == translations["js.select"]))) {
                                    check = false;
                                    $(this).css({"background-color": "#ffd5d5"});
                                } else {
                                    $(this).css({"background-color": "white"});
                                }
                            }
                        })
                    })
                }
                /* sauvegarde */
                /* ---------- */
                if(check == true) {
                    let resConfirm = false;
                    if(type == "one") {
                        resConfirm = true;
                        let msg = translations["js.sure_edit_this_entry"]
                        if ($("#p_phoneMobile1" + rowNumber).text() == "") {
                            msg = translations["js.sure_create_this_entry"]
                        }
                        if (confirm(msg)) {
                            resConfirm = false;
                        }
                    }
                    if (!resConfirm) {
                        /* creation de la table des donn√©es */
                        /* -------------------------------- */
                        let personDegree = [];
                        personDegree = new Object();
                        let strPersonDegree = "";

                        /* r√©cup√©ration de l'id du dipl√¥m√© si existant et du selectedCountry du School */
                        personDegree["id"] = $("#id" + rowNumber).text();
                        personDegree["selectedCountry"] = $("#selectedCountry").val();
                        strPersonDegree += "id=" + $("#id" + rowNumber).text();

                        if($("#selectedRegion").length && $('#selectedRegion').val().length) {
                            personDegree["selectedRegion"]  = $("#selectedRegion").val();
                        }

                        /* r√©cup√©ration des donn√©es saisies dans les inputs */
                        /*------------------------------------------------- */
                        $(row).each(function () {
                            $(this).find('input').each(function () {
                                if(!$(this).hasClass("enrolCheck")) {
                                    /*r√©cup√©ration du Label en enlevant le numero du rowNumber */
                                    let nbDigitsRowNumber = rowNumber.toString().length;

                                    let inputLabel = $(this).attr('id');

                                    inputLabel = inputLabel.substring(0, inputLabel.length - nbDigitsRowNumber);
                                    personDegree[inputLabel] = $(this).val();

                                    if ($(this).val().length > 0) {
                                        strPersonDegree += "&" + inputLabel + "=" + $(this).val();
                                    }
                                }
                            });
                            $(this).find('select').each(function () {
                                /*r√©cup√©ration du Label en enlevant le numero du rowNumber */
                                let nbDigitsRowNumber = rowNumber.toString().length;

                                let selectLabel = $(this).attr('id');
                                selectLabel = selectLabel.substring(0, selectLabel.length - nbDigitsRowNumber);

                                let label = selectLabel;
                                label = label.replace('select', '');
                                //personDegree[selectLabel] = $(this).val();
                                personDegree[label] = $(this).val();
                                if($(this).val().length>0) {
                                    strPersonDegree += "&" + label + "=" + $(this).val();
                                }

                                /* mise a jour du selected dans l'option */
                                $(this).find('option').each(function () {
                                    $(this).removeAttr('selected');
                                    if(personDegree[label] == $(this).val()) {
                                        $(this).attr("selected","selected");
                                        // console.log("-test--> " + personDegree[label] + " | "+ $(this).val() + " | " + $(this).text());
                                    }
                                })
                            });
                        });

                        // console.log(personDegree)

                        /* appel ajax en get pour sauvegarder le Dipl√¥m√© */
                        /* --------------------------------------------- */
                        let dirs = window.location.href.split('/');
                        let $locationRef = "";
                        for (let i = 0; i < dirs.length - 1; i++)
                            $locationRef += dirs[i] + '/';

                        if(personDegreeId == "") personDegreeId = -1;
                        $.get($locationRef + personDegreeId + '/enrollPersonDegreeUpdate/', personDegree).done(function (res) {

                            /* affichage des erreurs rencontr√©es */
                            /* --------------------------------- */
                            if (res[1].length > 0) {
                                // alert(res[1].length + " probl√®mes rencontr√©s lors de l'update, op√©ration annu√©e");

                                 alert(res[1][0]);
                                return;

                            /* mise √† jour de l'affichage des √©l√©ments en mode show */
                            /* ---------------------------------------------------- */
                            } else {
                                row = "#personDegree" + rowNumber;

                                //$(remove).css("display", "inline-block");
                                $("#p_password" + rowNumber).html(res[0]["pwd"]);
                                $("#id" + rowNumber).text(res[0]["id"]);
                                console.log ("-->" + personDegreeId + " | " + res[0]["id"] + " | " + res[0]["pwd"]);

                                $(row).each(function () {
                                    $(this).find('input').each(function () {
                                        if(!$(this).hasClass("enrolCheck")) {
                                            /*r√©cup√©ration du Label en enlevant le numero du rowNumber */
                                            personDegreeId = $(this).prop("id");
                                            let inputValue = $(this).val();

                                            let p_id = "#p_" + personDegreeId;
                                            $(p_id).html(inputValue);
                                            console.log("p_id: " + p_id + " -> " + inputValue);
                                        }
                                    });
                                    $(this).find('select option').each(function () {
                                        if($(this).val() != "")
                                            if($(this).attr("selected")=="selected") {
                                                /*r√©cup√©ration du Label en enlevant le numero du rowNumber */
                                                personDegreeId = $(this).parent().prop("id");
                                                let inputValue = $(this).text();
                                                // let inputValue = $(this).val();

                                                let p_id = "#p_" + personDegreeId;
                                                $(p_id).text(inputValue);
                                                // console.log("p_id: " + p_id + " -> " + inputValue);
                                            }
                                    });
                                })
                            }
                        }, "json");
                    };
                }
            } else if(action=="remove") {
                /* appel ajax en get pour supprimer le Dipl√¥m√© */
                /* ------------------------------------------- */
                //data = {"firstname":"Raoul", "lastname":"Dupont"};
                let dirs = window.location.href.split('/');
                let $locationRef = "";
                for (let i = 0; i < dirs.length - 1; i++)
                    $locationRef += dirs[i] + '/';

                    // if(confirm ("Etes vous s√ªr de supprimer cette entr√©e ?" )) {
                    /* creation de la table des donn√©es */
                    /* -------------------------------- */
                    let personDegree = [];
                    personDegree = new Object();

                    /* r√©cup√©ration de l'id du dipl√¥m√© si existant */
                    personDegreeId = $("#id" + rowNumber).text();

                    if(personDegreeId) {
                        $.get($locationRef + personDegreeId + '/personDegreeDelete/').done(function (res) {
                            /* affichage des erreurs rencontr√©es */
                            /* --------------------------------- */
                            if (res[1].length > 0) {
                                alert(res[1].length + " " + translations["js.problems_encountered_during_update_operation_canceled"]);
                            } else {
                                //alert( "Dipl√¥m√© supprim√© avec succ√®s");
                                $("#personDegree" + rowNumber).remove();
                            }
                        }, "json");
                    } else {
                        $("#personDegree" + rowNumber).remove();
                    }
                // }
            }
            if(errorNumber > 0) {
                if (saveMulti == false) {
                    alert(translations['js.please_complete_all_required_fields']);
                }
            }
            return errorNumber;
        };

        function addOptionRegion(rowNumber) {
            let $idSelected = -1;
            if ($('#selectRegion' + rowNumber + ' option').length == 1) {
                $idSelected = $('#selectRegion' + rowNumber + ' option:first').val();
                $('#selectRegion' + rowNumber + ' option:first').remove();
            }
            if ($('#selectRegion' + rowNumber + ' option').length == 0) {
                $("#selectRegion" + rowNumber).append("<option value=\"\">" + translations["js.select"] + "</option>");
                $("#regions option").each(function (option) {
                    let regionText = translations[$(this).text()];
                    if (!regionText) {
                        regionText = $(this).text();
                    }

                    if ($idSelected == $(this).val()) {
                        $("#selectRegion" + rowNumber).append("<option selected value=\"" + $(this).val() + "\">" + regionText + "</option>");
                    } else {
                        $("#selectRegion" + rowNumber).append("<option value=\"" + $(this).val() + "\">" + regionText + "</option>");
                    }
                });
            }
        }

        function addOptionDegree(rowNumber) {
            const degreeSelect = $(`#selectDegree${rowNumber}`);
            const degrees = $("#degrees option");
            let idSelected = -1;

            // Si un seul option existe, on le sauvegarde et on le supprime
            if (degreeSelect.find("option").length === 1) {
                idSelected = degreeSelect.find("option:first").val();
                degreeSelect.find("option:first").remove();
            }

            // Si aucun option n'existe, on ajoute les options
            if (degreeSelect.find("option").length === 0) {
                degreeSelect.append(`<option value="">${translations["js.select"]}</option>`);

                degrees.each(function () {
                    const option = $(this);
                    const degreeText = translations[option.text()] || option.text();
                    const isSelected = idSelected == option.val();

                    degreeSelect.append(`
                <option ${isSelected ? "selected" : ""} value="${option.val()}">
                    ${degreeText}
                </option>
            `);
                });
            }
        }

        function addOptionSectorArea(rowNumber) {
            let $idSelected = -1;
            if ($('#selectSectorArea' + rowNumber + ' option').length == 1) {
                $idSelected = $('#selectSectorArea' + rowNumber + ' option:first').val();
                $('#selectSectorArea' + rowNumber + ' option:first').remove();
            }

            if ($('#selectSectorArea' + rowNumber + ' option').length == 0) {
                $("#selectSectorArea" + rowNumber).append("<option selected value=\"\">" + translations["js.select"] + "</option>");
                $("#sectorAreas option").each(function (option) {
                    let sectorAreaText = translations[$(this).text()];
                    if (!sectorAreaText) {
                        sectorAreaText = $(this).text();
                    }
                    if ($idSelected == $(this).val()) {
                        $("#selectSectorArea" + rowNumber).append("<option selected value=\"" + $(this).val() + "\">" + sectorAreaText + "</option>");
                    } else {
                        $("#selectSectorArea" + rowNumber).append("<option value=\"" + $(this).val() + "\">" + sectorAreaText + "</option>");
                    }
                });
            }
        }

        function addOptionCity($region, rowNumber, optionValue) {
            let dirs = window.location.href.split('/');
            let $locationRef = "";
            for (let i = 0; i < dirs.length - 1; i++)
                $locationRef += dirs[i] + '/';

            if($region) {
                // appel Ajax sur bdd
                $.get($locationRef + $region + '/cityByRegion').done(function (cities) {
                    // recupere le Id du city existant
                    let $idSelected = -1;
                    if ($('#selectAddressCity' + rowNumber + ' option').length == 1) {
                        $idSelected = $('#selectAddressCity' + rowNumber + ' option:first').val();
                        $('#selectAddressCity' + rowNumber + ' option:first').remove();
                    }
                    $("#selectAddressCity" + rowNumber).append("<option selected value=\"\">" + translations["js.select"] + "</option>");
                    if (cities) {
                        cities.forEach((city) => {
                            if ($idSelected == city['id']) {
                                $("#selectAddressCity" + rowNumber).append("<option selected value=\"" + city['id'] + "\">" + city['name'] + "</option>");
                            } else {
                                $("#selectAddressCity" + rowNumber).append("<option value=\"" + city['id'] + "\">" + city['name'] + "</option>");
                            }
                        })
                    }
                    if (optionValue !== undefined) {
                        // changeSelectOptionByValue('#selectAddressCity' + rowNumber, optionValue, () => alert(`La ville de la ligne ${rowNumber} n'existe pas dans le system.`));
                        changeSelectOptionByValue('#selectAddressCity' + rowNumber, optionValue);
                    }
                })
            }
        }

        function addOptionActivity($sectorArea, rowNumber, optionValue) {
            let dirs = window.location.href.split('/');
            let $locationRef = "";
            for (let i = 0; i < dirs.length - 1; i++)
                $locationRef += dirs[i] + '/';

            // Call ajax to get the activities
            if ($sectorArea) {
                $.get($locationRef + $sectorArea + '/activityBySchoolSectorArea').done(function (activities) {
                    // Get the Id of the existing activity
                    let $idSelected = -1;
                    if ($('#selectActivity' + rowNumber + ' option').length == 1) {
                        $idSelected = $('#selectActivity' + rowNumber + ' option:first').val();
                        $('#selectActivity' + rowNumber + ' option:first').remove();
                    }

                    $("#selectActivity" + rowNumber).append("<option selected value=\"\">" + translations["js.select"] + "</option>");
                    if (activities) {
                        activities.forEach((activity) => {
                            // On devrait traduire les activit√©s comme translations[activity['name']]
                            if ($idSelected == activity['id']) {
                                $("#selectActivity" + rowNumber).append("<option selected value=\"" + activity['id'] + "\">" + activity['name'] + "</option>");
                            } else {
                                $("#selectActivity" + rowNumber).append("<option value=\"" + activity['id'] + "\">" + activity['name'] + "</option>");
                            }
                        })
                    }
                    if (optionValue !== undefined) {
                        changeSelectOptionByValue('#selectActivity' + rowNumber, optionValue);
                    }
                })
            }
        }

        var today = new Date();
        today.setFullYear(today.getFullYear() - 12);
        $(document).ready(function () {
            initDatepicker(today);
        })

    </script>
    <script>
        $(document).ready(function () {
            let translations = [];
            getTranslation().then (function (translation) {
                translations = translation;
                // console.log(translations);


                /* Mise √† jour des options dans les selects de PersonDegrees existants */
                /* ------------------------------------------------------------------- */
                for (let $i = 1 ; $i <= $('#rowNumber').val(); $i++) {
                    addOptionRegion($i);
                    addOptionSectorArea($i);
                    addOptionDegree($i);

                    let $region = $('#selectRegion' + $i +' option:selected').val();
                    addOptionCity($region,$i);

                    let $sector = $('#selectSectorArea' + $i +' option:selected').val();
                    addOptionActivity($sector,$i);
                }

                // Event
                // Recherches de ville en fonction de la region
                $('.selectRegion').on('change', function () {
                    let id = $(this).attr("id").replaceAll("selectRegion", "");
                    let $regionId = $('#selectRegion' + id + " option:selected").val();
                    if ($regionId) {
                        addOptionCity($regionId, id);
                        $("#selectAddressCity" + id).find('option').remove();
                    }
                });

                // Event
                // Recherches des fili√®res en fonction des secteurs
                $('.selectSectorArea').on('change', function () {
                    let id = $(this).attr("id").replaceAll("selectSectorArea", "");
                    let $sectorAreaId = $('#selectSectorArea' + id + " option:selected").val();
                    if ($sectorAreaId) {
                        addOptionActivity($sectorAreaId, id);
                        $("#selectActivity" + id).find('option').remove();
                    }
                });


                // // Gestion import CSV
                $('#importCSV_utf8').click(function (e) {
                    e.preventDefault();
                    $('#inputImportCSV_utf8').trigger('click');
                });
                $('#importCSV_excel').click(function (e) {
                    e.preventDefault();
                    $('#inputImportCSV_excel').trigger('click');
                });
                $('#inputImportCSV_utf8').change(function (e) {
                    e.preventDefault();
                    let file = document.getElementById("inputImportCSV_utf8").files[0];
                    importCsvExcelFile(file, "UTF-8")
                });
                $('#inputImportCSV_excel').change(function (e) {
                    e.preventDefault();
                    let file = document.getElementById("inputImportCSV_excel").files[0];
                    importCsvExcelFile(file, "windows-1252")
                });

                function importCsvExcelFile(file, format) {
                    if (!file) {
                        alert("File not found, command aborted");
                        return;
                    }

                    // Check file extension
                    const fileName = file.name.toLowerCase();
                    const isCsv = fileName.endsWith('.csv');
                    const isExcel = fileName.endsWith('.xls') || fileName.endsWith('.xlsx');

                    console.log('isCsv, isExcel', isCsv, isExcel);

                    if (!isCsv && !isExcel) {
                        alert("Unsupported file type. Please upload a CSV or Excel file.");
                        return;
                    }

                    if (isCsv) {
                        // Handle CSV files
                        let reader = new FileReader();
                        reader.readAsText(file, format);

                        reader.onload = function (evt) {
                            processData(evt.target.result);
                        };

                        reader.onerror = function (e) {
                            alert(translations['js.file_contains_errors']);
                        };
                    } else if (isExcel) {
                        // Handle Excel files
                        let reader = new FileReader();
                        reader.readAsArrayBuffer(file);

                        reader.onload = function (evt) {
                            const data = new Uint8Array(evt.target.result);
                            const workbook = XLSX.read(data, { type: 'array' });

                            // Assuming the first sheet is the one to process
                            const firstSheetName = workbook.SheetNames[0];
                            const worksheet = workbook.Sheets[firstSheetName];

                            // Convert the sheet to CSV and process it
                            const csvData = XLSX.utils.sheet_to_csv(worksheet);
                            processData(csvData);
                        };

                        reader.onerror = function (e) {
                            alert(translations['js.file_contains_errors']);
                        };
                    }
                }

                function processData(data) {
                    let errorFields = [];
                    let rows = data.split("\n")
                        .map(row => row.replaceAll('\r', ""))
                        .filter((row, index) => {
                            // Garde l'en-t√™te (index 0) mais filtre les lignes vides pour les autres
                            if (index === 0) return true;
                            const trimmed = row.trim();
                            return trimmed !== '' && !/^[,;]+$/.test(trimmed);
                        });
                    let header = rows[0];

                    let fields = header.split(';');
                    if (fields.length < 2) fields = header.split(',');

                    let fieldNames = {
                        "immatriculationField": null,
                        "prenomField": null,
                        "nomField": null,
                        "dateNaissanceField": null,
                        "genreField": null,
                        "regionField": null,
                        "villeField": null,
                        "portableField": null,
                        "portableParentField": null,
                        "emailField": null,
                        "diplomeField": null,
                        "secteurField": null,
                        "filiereField": null,
                    };

                    let fieldsOrder = [
                        "immatriculationField",
                        "prenomField",
                        "nomField",
                        "dateNaissanceField",
                        "genreField",
                        "regionField",
                        "villeField",
                        "portableField",
                        "portableParentField",
                        "emailField",
                        "diplomeField",
                        "secteurField",
                        "filiereField"
                    ];

                    for (let i = 0; i < fields.length; i++) {
                        let field = fields[i].replaceAll('\"', "").toLowerCase().trim();

                        // Field names in multiple languages
                        switch (field) {
                            case translations['js.import_csv_registration']: fieldNames['immatriculationField'] = i; break;
                            case translations['js.import_csv_first_name']: fieldNames['prenomField'] = i; break;
                            case translations['js.import_csv_name']: fieldNames['nomField'] = i; break;
                            case translations['js.import_csv_birthday']: fieldNames['dateNaissanceField'] = i; break;
                            case translations['js.import_csv_gender']: fieldNames['genreField'] = i; break;
                            case translations['js.import_csv_region']: fieldNames['regionField'] = i; break;
                            case translations['js.import_csv_city']: fieldNames['villeField'] = i; break;
                            case translations['js.import_csv_mobile_phone']: fieldNames['portableField'] = i; break;
                            case translations['js.import_csv_parent_mobile_phone']: fieldNames['portableParentField'] = i; break;
                            case translations['js.import_csv_email']: fieldNames['emailField'] = i; break;
                            case translations['js.import_csv_diploma']: fieldNames['diplomeField'] = i; break;
                            case translations['js.import_csv_sector']: fieldNames['secteurField'] = i; break;
                            case translations['js.import_csv_subsector']: fieldNames['filiereField'] = i; break;
                            default:
                                errorFields.push(fields[i]);
                        }
                    }

                    // Check bad fieldName syntax
                    if (errorFields.length > 0) {
                        let errorMsg = translations["js.bad_syntax_of_following_fields"] + " ";
                        errorFields.forEach(function (error) {
                            errorMsg += error + ', ';
                        });
                        errorMsg += translations["js.authorized_fields"] + " = " +
                            translations["js.import_csv_registration"] + ", " +
                            translations["js.import_csv_first_name"] + ", " +
                            translations["js.import_csv_name"] + ", " +
                            translations["js.import_csv_birthday"] + ", " +
                            translations["js.import_csv_gender"] + ", " +
                            translations["js.import_csv_region"] + ", " +
                            translations["js.import_csv_city"] + ", " +
                            translations["js.import_csv_mobile_phone"] + ", " +
                            translations["js.import_csv_parent_mobile_phone"] + ", " +
                            translations["js.import_csv_email"] + ", " +
                            translations["js.import_csv_diploma"] + ", " +
                            translations["js.import_csv_sector"] + ", " +
                            translations["js.import_csv_subsector"];
                        alert(errorMsg);
                        return;
                    }

                    // Check minimum data fields
                    if ((fieldNames['prenomField'] == null) ||
                        (fieldNames['nomField'] == null) ||
                        (fieldNames['portableField'] == null)) {
                        alert(translations['js.file_invalid_fields_firstname_lastname_and_telephone_mandatory']);
                        return;
                    }

                    rows.shift();
                    let errors = [];
                    rows.forEach(function (row) {
                        if (row) {
                            let columnData = row.split(';').map(function (item) {
                                return item.replace(/['"]+/g, '');
                            });

                            if (columnData.length < 2) {
                                columnData = row.split(',').map(function (item) {
                                    return item.replace(/['"]+/g, '');
                                });
                            }

                            // Create a new ordered columnData
                            let orderedData = [];
                            for (let i = 0; i < fieldsOrder.length; i++) {
                                let fieldName = fieldsOrder[i];
                                let fieldNumber = fieldNames[fieldName];

                                // Replace F by "une femme" and M by "un homme"
                                if (fieldNumber == 4) {
                                    if (columnData[fieldNumber] == 'F') columnData[fieldNumber] = "une femme";
                                    if (columnData[fieldNumber] == 'M') columnData[fieldNumber] = "un homme";
                                }

                                orderedData.push(String(columnData[fieldNumber]));
                            }
                            addRowPersonDegreeWithValue(orderedData, function (err) {
                                if (err.length > 0) {
                                    errors = errors.concat(err);
                                }
                            });
                        }
                    });

                    if (errors.length > 0) {
                        alert(translations['js.data_not_compliant_correct_manually']);
                    }

                    $('#nbRowImported').val(rows.length - 1);
                }

            });
        });
    </script>
{% endblock %}
